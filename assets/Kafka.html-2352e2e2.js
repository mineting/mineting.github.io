import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as r,b as n,e as a,w as u,d as s,f as t}from"./app-50124fd5.js";const k="/assets/Kafka消息队列-削峰-300a3533.png",d="/assets/Kafka消息队列-解耦-034391c4.png",m="/assets/Kafka消息队列-异步-46c550a5.png",v="/assets/Kakfa消息队列-点对点模式-0f0d1cca.png",b="/assets/Kafka消息队列-发布订阅模式-9d9b3261.png",h="/assets/Kafka基本架构-97fc7f78.png",o="/assets/Kafka生产者发送流程-525b95f8.png",g="/assets/Kafka分区优点-856ebecb.png",f="/assets/ACK应答级别0-d34a6758.png",y="/assets/ACK应答级别1-4457423a.png",_="/assets/ACK应答级别all-4746bd8a.png",w="/assets/ACK应答级别为all时数据重复-de77c603.png",x="/assets/幂等性原理-cf141c94.png",S="/assets/生产者事务原理-bc920ef1.png",q="/assets/单分区数据有序-3cf30c41.png",P="/assets/数据有序-45dfe85e.png",K={},z={align:"center"},C=n("b",null,"Kafka",-1),E=n("p",null,"【Refer】",-1),A=n("p",null,"文档：",-1),R={href:"https://kafka.apache.org/",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,"视频：",-1),T={href:"https://www.bilibili.com/video/BV1vr4y1677k/?spm_id_from=333.337.search-card.all.click",target:"_blank",rel:"noopener noreferrer"},L=t('<h1 id="kafka-入门" tabindex="-1"><a class="header-anchor" href="#kafka-入门" aria-hidden="true">#</a> kafka 入门</h1><h2 id="kafka-概述" tabindex="-1"><a class="header-anchor" href="#kafka-概述" aria-hidden="true">#</a> Kafka 概述</h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><ul><li><p>Kafka 传统定义：<strong>Kafka 是一个分布式的基于发布/订阅模式的消息队列（Message Queue）</strong>，主要应用于大数据实时处理领域。</p><p>发布/订阅：消息的发布者不会将消息直接发送给特定的订阅者，而是将发布的消息 分为不同的类别，订阅者只接收感兴趣的消息。</p></li><li><p>Kafka 最新定义 ： <strong>Kafka是一个开源的分布式事件流平台 （Event Streaming Platform）</strong>，被数千家公司用于高性能数据管道、流分析、数据集成和关键任务应用。</p></li></ul><h3 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列" aria-hidden="true">#</a> 消息队列</h3><p>消息队列，是消息也是队列；目前企业中常见的消息队列产品主要有 Kafka、ActiveMQ 、RabbitMQ 、 RocketMQ 等。</p><p>在大数据场景主要采用 Kafka 作为消息队列。在 JavaEE 开发中主要采用 ActiveMQ、 RabbitMQ、RocketMQ</p><h4 id="传统消息队列的应用场景" tabindex="-1"><a class="header-anchor" href="#传统消息队列的应用场景" aria-hidden="true">#</a> 传统消息队列的应用场景</h4><p>主要应用场景包括：缓存/消峰、解耦和异步通信</p><ul><li><p>缓冲/消峰：有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。</p><figure><img src="'+k+'" alt="Kafka消息队列-削峰.png" tabindex="0" loading="lazy"><figcaption>Kafka消息队列-削峰.png</figcaption></figure></li><li><p>解耦：允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p><figure><img src="'+d+'" alt="Kafka消息队列-解耦.png" tabindex="0" loading="lazy"><figcaption>Kafka消息队列-解耦.png</figcaption></figure></li><li><p>异步通信：允许用户把一个消息放入队列，但并不立即处理它，然后在需要的时候再去处理它们。</p><figure><img src="'+m+'" alt="Kafka消息队列-异步.png" tabindex="0" loading="lazy"><figcaption>Kafka消息队列-异步.png</figcaption></figure></li></ul><h4 id="消息队列的两种模式" tabindex="-1"><a class="header-anchor" href="#消息队列的两种模式" aria-hidden="true">#</a> 消息队列的两种模式</h4><h5 id="点对点模式" tabindex="-1"><a class="header-anchor" href="#点对点模式" aria-hidden="true">#</a> 点对点模式</h5><ul><li><p>消费者主动拉取数据，消息收到后清除消息</p><figure><img src="'+v+'" alt="Kakfa消息队列-点对点模式.png" tabindex="0" loading="lazy"><figcaption>Kakfa消息队列-点对点模式.png</figcaption></figure></li></ul><h5 id="发布-订阅模式" tabindex="-1"><a class="header-anchor" href="#发布-订阅模式" aria-hidden="true">#</a> 发布 / 订阅模式</h5><ul><li><p>可以有多个topic主题</p></li><li><p>消费者消费数据之后，不删除数据</p></li><li><p>每个消费者相互独立，都可以消费到数据</p><figure><img src="'+b+'" alt="Kafka消息队列-发布订阅模式.png" tabindex="0" loading="lazy"><figcaption>Kafka消息队列-发布订阅模式.png</figcaption></figure></li></ul><h3 id="kafka-基础架构" tabindex="-1"><a class="header-anchor" href="#kafka-基础架构" aria-hidden="true">#</a> Kafka 基础架构</h3><ol><li>为方便扩展，并提高吞吐量，一个 topic 分为多个 partition</li><li>配合分区的设计，提出消费者组的概念，组内每个消费者并行消费</li><li>为提高可用性，为每个 partition 增加若干副本，类似 NameNode HA</li><li>Zookeeper 中记录谁是 Leader，Kafka2.8.0 以后也可以配置不采用 Zookeeper</li></ol><figure><img src="'+h+'" alt="Kafka基本架构.png" tabindex="0" loading="lazy"><figcaption>Kafka基本架构.png</figcaption></figure><blockquote><p><strong>各个组件说明：</strong></p><ol><li><p><strong>Producer：消息生产者，就是向 Kafka broker 发消息的客户端</strong></p></li><li><p><strong>Consumer：消息消费者，向 Kafka broker 取消息的客户端</strong></p></li><li><p><strong>Consumer Group（CG）：消费者组，由多个 consumer 组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</strong></p></li><li><p><strong>Broker：一台 Kafka 服务器就是一个 broker。一个集群由多个 broker 组成。一个 broker 可以容纳多个 topic</strong></p></li><li><p><strong>Topic：可以理解为一个队列，生产者和消费者面向的都是一个 topic</strong></p></li><li><p><strong>Partition：为了实现扩展性，一个非常大的 topic 可以分布到多个 broker（即服 务器）上，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列。</strong></p></li><li><p><strong>Replica：副本，一个 topic 的每个分区都有若干个副本，一个 Leader 和若干个 Follower。</strong></p></li><li><p><strong>Leader：每个分区多个副本的 “主”，生产者发送数据的对象，以及消费者消费数据的对象都是 Leader。</strong></p></li><li><p><strong>Follower：每个分区多个副本中的 “从”，实时从 Leader 中同步数据，保持和 Leader 数据的同步。Leader 发生故障时，某个 Follower 会成为新的 Leader。</strong></p></li></ol></blockquote><h2 id="kafka-入门示例" tabindex="-1"><a class="header-anchor" href="#kafka-入门示例" aria-hidden="true">#</a> Kafka 入门示例</h2>',20),O={href:"https://kafka.apache.org/downloads",target:"_blank",rel:"noopener noreferrer"},j=t(`<p>以 <code>kafka_2.12-3.0.0.tgz</code> 为例，Kafka 由 Scala 和 Java 两种语言编写，Producer 和 Consumer 由 Java 编写，Broker 由 Scala 编写。</p><h3 id="预先准备" tabindex="-1"><a class="header-anchor" href="#预先准备" aria-hidden="true">#</a> 预先准备</h3><h4 id="配置-java-环境" tabindex="-1"><a class="header-anchor" href="#配置-java-环境" aria-hidden="true">#</a> 配置 Java 环境</h4><ul><li><p>卸载自带的 OpenJDK（可选）</p></li><li><p>配置 Java 环境变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># java</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/opt/java/jdk1.8.0_131
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span>/opt/java/jdk1.8.0_131/jre
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:%JAVA_HOME%/lib:%JAVA_HOME%/lib
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="配置集群免密登录" tabindex="-1"><a class="header-anchor" href="#配置集群免密登录" aria-hidden="true">#</a> 配置集群免密登录</h4><ul><li><p>配置集群 ip 映射</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># cat /etc/hosts</span>
<span class="token number">127.0</span>.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
<span class="token number">192.168</span>.100.100 <span class="token number">192.168</span>.100.100
<span class="token number">192.168</span>.100.110 <span class="token number">192.168</span>.100.110
<span class="token number">192.168</span>.100.120 <span class="token number">192.168</span>.100.120
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>生成秘钥</p><p>会在 ~ 目录下生成 .ssh 目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ssh-keygen -t rsa</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>分发秘钥</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id 192.168.100.100</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id 192.168.100.110</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id 192.168.100.120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,6),M={id:"分发脚本-xsync-sh",tabindex:"-1"},F=n("a",{class:"header-anchor",href:"#分发脚本-xsync-sh","aria-hidden":"true"},"#",-1),Z={href:"http://xsync.sh",target:"_blank",rel:"noopener noreferrer"},N={href:"http://xsync.sh",target:"_blank",rel:"noopener noreferrer"},$={href:"http://xsync.sh",target:"_blank",rel:"noopener noreferrer"},H=n("li",null,"shell 脚本保存或者软链接在 /usr/bin 这样的目录下，以使命令全局有效",-1),V=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 判断参数个数</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> <span class="token parameter variable">-lt</span> <span class="token number">1</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;Not  Enough Arguments&quot;</span>
        <span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>
<span class="token comment"># 遍历所有主机</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">host</span> <span class="token keyword">in</span> <span class="token number">192.168</span>.100.100 <span class="token number">192.168</span>.100.110 <span class="token number">192.168</span>.100.120
<span class="token keyword">do</span>
        <span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token variable">$host</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
        <span class="token comment"># 遍历所有目录</span>
        <span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$@</span>
        <span class="token keyword">do</span>
                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-e</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
                <span class="token keyword">then</span>
                        <span class="token comment"># 如果文件存在，获取父目录，</span>
                        <span class="token comment"># pwd -P：如果目录是链接时，显示出实际路径，而非使用连接（link）路径。pwd防止传入相对路径</span>
                        <span class="token comment"># cd -P:如果目录是链接时，切换到实际路径的目录。</span>
                        <span class="token assign-left variable">pdir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> <span class="token parameter variable">-P</span> <span class="token punctuation">$(</span>dirname $file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>
                        <span class="token comment"># 获取文件名称</span>
                        <span class="token assign-left variable">filename</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $file<span class="token variable">)</span></span>
                        <span class="token function">ssh</span> <span class="token variable">$host</span> <span class="token string">&quot;mkdir -p <span class="token variable">$pdir</span>&quot;</span>
                        <span class="token function">rsync</span> <span class="token parameter variable">-av</span> <span class="token variable">$pdir</span>/<span class="token variable">$filename</span> <span class="token variable">$host</span><span class="token builtin class-name">:</span><span class="token variable">$pdir</span>
                <span class="token keyword">else</span>
                        <span class="token builtin class-name">echo</span> <span class="token variable">$file</span> not exist<span class="token operator">!</span>
                <span class="token keyword">fi</span>
        <span class="token keyword">done</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),B={id:"查看-java-进程-jspall-sh",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#查看-java-进程-jspall-sh","aria-hidden":"true"},"#",-1),G={href:"http://jspall.sh",target:"_blank",rel:"noopener noreferrer"},D=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">host</span> <span class="token keyword">in</span> <span class="token number">192.168</span>.100.100 <span class="token number">192.168</span>.100.110 <span class="token number">192.168</span>.100.120
<span class="token keyword">do</span>
 <span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token variable">$host</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
 <span class="token function">ssh</span> <span class="token variable">$host</span>  <span class="token string">&quot;source /etc/profile &amp;&amp; jps | grep -v jps &quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装步骤" tabindex="-1"><a class="header-anchor" href="#安装步骤" aria-hidden="true">#</a> 安装步骤</h3><p>以 <code>apache-zookeeper-3.5.7-bin.tar.gz</code> 、<code>kafka_2.12-3.0.0.tgz</code> 为例。</p><h4 id="安装-zookeeper" tabindex="-1"><a class="header-anchor" href="#安装-zookeeper" aria-hidden="true">#</a> 安装 Zookeeper</h4><h5 id="单机版" tabindex="-1"><a class="header-anchor" href="#单机版" aria-hidden="true">#</a> 单机版</h5>`,5),Q={href:"https://zookeeper.apache.org/releases.html",target:"_blank",rel:"noopener noreferrer"},U=t(`<p>Zookeeper 版本：apache-zookeeper-3.5.7-bin.tar.gz，解压至 /opt/zookeeper/</p><p>安装准备：安装 JDK，解压至 /opt/zookeeper/，重命名文件夹名称</p><p>配置 Java 环境变量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># java</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/opt/java/jdk1.8.0_131
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span>/opt/java/jdk1.8.0_131/jre
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:%JAVA_HOME%/lib:%JAVA_HOME%/lib
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span>

<span class="token comment"># zookeeper</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">ZOOKEEPER_HOME</span><span class="token operator">=</span>/opt/zookeeper/zookeeper-3.5.7
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ZOOKEEPER_HOME</span>/bin:<span class="token environment constant">$PATH</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刷新环境变量配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> /etc/profile
<span class="token comment"># 或者修改 ~/.bash_profile， source ~/.bash_profile</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解压 Zookeeper：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root zookeeper<span class="token punctuation">]</span><span class="token comment"># ll zookeeper-3.5.7/</span>
总用量 <span class="token number">32</span>
drwxr-xr-x. <span class="token number">2</span>  <span class="token number">502</span> games   <span class="token number">232</span> <span class="token number">2</span>月  <span class="token number">10</span> <span class="token number">2020</span> bin
drwxr-xr-x. <span class="token number">2</span>  <span class="token number">502</span> games    <span class="token number">77</span> <span class="token number">2</span>月   <span class="token number">7</span> <span class="token number">2020</span> conf
drwxr-xr-x. <span class="token number">5</span>  <span class="token number">502</span> games  <span class="token number">4096</span> <span class="token number">2</span>月  <span class="token number">10</span> <span class="token number">2020</span> docs
drwxr-xr-x. <span class="token number">2</span> root root   <span class="token number">4096</span> <span class="token number">9</span>月  <span class="token number">27</span> <span class="token number">18</span>:40 lib
-rw-r--r--. <span class="token number">1</span>  <span class="token number">502</span> games <span class="token number">11358</span> <span class="token number">9</span>月  <span class="token number">13</span> <span class="token number">2018</span> LICENSE.txt
-rw-r--r--. <span class="token number">1</span>  <span class="token number">502</span> games   <span class="token number">432</span> <span class="token number">2</span>月  <span class="token number">10</span> <span class="token number">2020</span> NOTICE.txt
-rw-r--r--. <span class="token number">1</span>  <span class="token number">502</span> games  <span class="token number">1560</span> <span class="token number">2</span>月   <span class="token number">7</span> <span class="token number">2020</span> README.md
-rw-r--r--. <span class="token number">1</span>  <span class="token number">502</span> games  <span class="token number">1347</span> <span class="token number">2</span>月   <span class="token number">7</span> <span class="token number">2020</span> README_packaging.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改配置：将 conf 路径下 zoo_sample.cfg 修改为 zoo.cfg，并修改文件中 dataDir 的路径，一般设置为安装目录下的 zkData（mkdir zkData）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root conf<span class="token punctuation">]</span><span class="token comment"># mv zoo_sample.cfg zoo.cfg</span>
<span class="token punctuation">[</span>root@root conf<span class="token punctuation">]</span><span class="token comment"># vim zoo.cfg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># The number of milliseconds of each tick</span>
<span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span>
<span class="token comment"># The number of ticks that the initial</span>
<span class="token comment"># synchronization phase can take</span>
<span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token comment"># The number of ticks that can pass between</span>
<span class="token comment"># sending a request and getting an acknowledgement</span>
<span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span>
<span class="token comment"># the directory where the snapshot is stored.</span>
<span class="token comment"># do not use /tmp for storage, /tmp here is just</span>
<span class="token comment"># example sakes.</span>
<span class="token comment"># dataDir=/tmp/zookeeper</span>
<span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/opt/zookeeper/zookeeper-3.5.7/zkData
<span class="token comment"># the port at which the clients will connect</span>
<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作 Zookeeper：</p>`,12),X={href:"http://zkServer.sh",target:"_blank",rel:"noopener noreferrer"},Y=n("p",null,"​ 查看进程是否启动：jps",-1),W={href:"http://zkServer.sh",target:"_blank",rel:"noopener noreferrer"},nn={href:"http://zkCli.sh",target:"_blank",rel:"noopener noreferrer"},sn=n("p",null,"​ 退出客户端：quit",-1),an={href:"http://zkServer.sh",target:"_blank",rel:"noopener noreferrer"},en=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root zookeeper-3.5.7<span class="token punctuation">]</span><span class="token comment"># cd bin</span>
<span class="token punctuation">[</span>root@root bin<span class="token punctuation">]</span><span class="token comment"># zkServer.sh start</span>
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.5.7/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Starting zookeeper <span class="token punctuation">..</span>. STARTED
<span class="token punctuation">[</span>root@root bin<span class="token punctuation">]</span><span class="token comment"># jps</span>
<span class="token number">5191</span> Jps
<span class="token number">5160</span> QuorumPeerMain
<span class="token punctuation">[</span>root@root bin<span class="token punctuation">]</span><span class="token comment"># zkServer.sh status</span>
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.5.7/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Client port found: <span class="token number">2181</span>. Client address: localhost.
Mode: standalone
<span class="token comment"># 退出</span>
<span class="token punctuation">[</span>root@root bin<span class="token punctuation">]</span><span class="token comment"># zkServer.sh stop</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@root bin<span class="token punctuation">]</span><span class="token comment"># zkCli.sh</span>
<span class="token comment">#.....</span>
<span class="token number">2022</span>-09-27 <span class="token number">19</span>:09:18,427 <span class="token punctuation">[</span>myid:localhost:2181<span class="token punctuation">]</span> - INFO  <span class="token punctuation">[</span>main-SendThread<span class="token punctuation">(</span>localhost:2181<span class="token punctuation">)</span>:ClientCnxn<span class="token variable">$SendThread</span>@1394<span class="token punctuation">]</span> - Session establishment complete on server localhost/127.0.0.1:2181, sessionid <span class="token operator">=</span> 0x10000be49f20002, negotiated <span class="token function">timeout</span> <span class="token operator">=</span> <span class="token number">30000</span>

WATCHER::

WatchedEvent state:SyncConnected type:None path:null
<span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token function">ls</span> /
<span class="token punctuation">[</span>zookeeper<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置参数说明：</p><p>配置文件 zoo.cfg 中参数含义：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># The number of milliseconds of each tick</span>
<span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span>
<span class="token comment"># The number of ticks that the initial</span>
<span class="token comment"># synchronization phase can take</span>
<span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token comment"># The number of ticks that can pass between</span>
<span class="token comment"># sending a request and getting an acknowledgement</span>
<span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span>
<span class="token comment"># the directory where the snapshot is stored.</span>
<span class="token comment"># do not use /tmp for storage, /tmp here is just</span>
<span class="token comment"># example sakes.</span>
<span class="token comment"># dataDir=/tmp/zookeeper</span>
<span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/opt/zookeeper/zookeeper-3.5.7/zkData
<span class="token comment"># the port at which the clients will connect</span>
<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span>
<span class="token comment"># the maximum number of client connections.</span>
<span class="token comment"># increase this if you need to handle more clients</span>
<span class="token comment">#maxClientCnxns=60</span>
<span class="token comment">#</span>
<span class="token comment"># Be sure to read the maintenance section of the</span>
<span class="token comment"># administrator guide before turning on autopurge.</span>
<span class="token comment">#</span>
<span class="token comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span>
<span class="token comment">#</span>
<span class="token comment"># The number of snapshots to retain in dataDir</span>
<span class="token comment">#autopurge.snapRetainCount=3</span>
<span class="token comment"># Purge task interval in hours</span>
<span class="token comment"># Set to &quot;0&quot; to disable auto purge feature</span>
<span class="token comment">#autopurge.purgeInterval=1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tickTime = 2000：通信心跳时间，Zookeeper服务器与客户端心跳时间，单位毫秒</p><p>initLimit = 10：LF 初始通信时限，Leader和Follower初始连接时能容忍的最多心跳数**（tickTime的数量）**</p><p>syncLimit = 5：LF 同步通信时限，Leader和Follower之间通信时间如果超过syncLimit * tickTime，Leader认为Follwer死 掉，从服务器列表中删除Follwer。</p><p>dataDir：保存Zookeeper中的数据，默认的tmp目录，容易被Linux系统定期删除，所以一般不用默认的tmp目录。</p><p>clientPort = 2181：客户端连接端口，通常不做修改。</p><p>maxClientCnxns=60：客户端最大连接数量</p>`,11),tn={href:"https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance",target:"_blank",rel:"noopener noreferrer"},pn=n("h5",{id:"集群版",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#集群版","aria-hidden":"true"},"#"),s(" 集群版")],-1),on=t("<li><p>在三台机器上安装 Zookeeper</p></li><li><p>配置服务器编号：<strong>在安装目录配置 zkData，在 zkData 下创建 myid 文件，在文件中添加与 server 对应的编号</strong></p></li><li><p>分发 zookeeper 至其他机器</p></li><li><p>配置 zoo.cfg文件，增加如下配置：</p><p>server.0=192.168.100.100:2888:3888</p><p>server.1=192.168.100.110:2888:3888</p><p>server.2=192.168.100.120:2888:3888</p><p>配置参数说明：</p><p>server.A=B:C:D</p><p>A 表示集群模式下，配置一个文件 myid 中的机器编号，Zookeeper 启动时读取此文件，拿到里面的数据与 zoo.cfg 里面的配置信息比较从而判断到底是哪个 server。</p><p>B 是服务器的地址</p><p>C 是这个服务器 Follower 与集群中的 Leader 服务器交换信息的端口</p><p>D 是用来执行选举时服务器相互通信的端口。</p></li>",4),ln={href:"http://xsync.sh",target:"_blank",rel:"noopener noreferrer"},cn=t(`<li><p>创建 Zookeeper 集群启动脚本 <code>zk.sh</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>
<span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token for-or-select variable">host</span> <span class="token keyword">in</span> <span class="token number">192.168</span>.100.100 <span class="token number">192.168</span>.100.110 <span class="token number">192.168</span>.100.120
	<span class="token keyword">do</span>
		<span class="token builtin class-name">echo</span> <span class="token string">&quot;========zookeeper <span class="token variable">$host</span> start========&quot;</span>
		<span class="token function">ssh</span> <span class="token variable">$host</span> <span class="token string">&quot;/opt/zookeeper/zookeeper-3.5.7/bin/zkServer.sh start&quot;</span>
	<span class="token keyword">done</span>
<span class="token punctuation">}</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">&quot;status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token for-or-select variable">host</span> <span class="token keyword">in</span> <span class="token number">192.168</span>.100.100 <span class="token number">192.168</span>.100.110 <span class="token number">192.168</span>.100.120
	<span class="token keyword">do</span>
		<span class="token builtin class-name">echo</span> <span class="token string">&quot;========zookeeper <span class="token variable">$host</span> status========&quot;</span>
		<span class="token function">ssh</span> <span class="token variable">$host</span> <span class="token string">&quot;/opt/zookeeper/zookeeper-3.5.7/bin/zkServer.sh status&quot;</span>
	<span class="token keyword">done</span>
<span class="token punctuation">}</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">&quot;stop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token for-or-select variable">host</span> <span class="token keyword">in</span> <span class="token number">192.168</span>.100.100 <span class="token number">192.168</span>.100.110 <span class="token number">192.168</span>.100.120
	<span class="token keyword">do</span>
		<span class="token builtin class-name">echo</span> <span class="token string">&quot;========zookeeper <span class="token variable">$host</span> stop========&quot;</span>
		<span class="token function">ssh</span> <span class="token variable">$host</span> <span class="token string">&quot;/opt/zookeeper/zookeeper-3.5.7/bin/zkServer.sh stop&quot;</span>
	<span class="token keyword">done</span>
<span class="token punctuation">}</span>
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动 Zookeeper 集群：</p><p>通过 <code>zk.sh</code> 启动集群：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost shell<span class="token punctuation">]</span><span class="token comment"># zk.sh start</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>zookeeper <span class="token number">192.168</span>.100.100 <span class="token assign-left variable">start</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.5.7/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Starting zookeeper <span class="token punctuation">..</span>. STARTED
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>zookeeper <span class="token number">192.168</span>.100.110 <span class="token assign-left variable">start</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.5.7/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Starting zookeeper <span class="token punctuation">..</span>. STARTED
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>zookeeper <span class="token number">192.168</span>.100.120 <span class="token assign-left variable">start</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.5.7/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Starting zookeeper <span class="token punctuation">..</span>. STARTED
<span class="token punctuation">[</span>root@localhost shell<span class="token punctuation">]</span><span class="token comment"># zk.sh status</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>zookeeper <span class="token number">192.168</span>.100.100 <span class="token assign-left variable">status</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.5.7/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Client port found: <span class="token number">2181</span>. Client address: localhost.
Mode: follower
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>zookeeper <span class="token number">192.168</span>.100.110 <span class="token assign-left variable">status</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.5.7/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Client port found: <span class="token number">2181</span>. Client address: localhost.
Mode: leader
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>zookeeper <span class="token number">192.168</span>.100.120 <span class="token assign-left variable">status</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.5.7/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Client port found: <span class="token number">2181</span>. Client address: localhost.
Mode: follower

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>报错解决：</strong></p><ul><li><p>报错一：</p><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>注意报错：

​\`\`\`shell
# 如果报错：Error: JAVA_HOME is not set and java could not be found in PATH.
# 单机启动没有问题，但集群启动报错
# 解决：在 zookeeper/bin/zkEnv.sh 头部手动添加 JAVA_HOME=/opt/java/jdk1.8.0_131
# 修改完成后，重新分发
​\`\`\`

​\`\`\`shell
<span class="token punctuation">[</span>root@root zookeeper-3.5.7<span class="token punctuation">]</span># zkServer.sh status
ZooKeeper JMX enabled by default
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>报错二：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Using config: /opt/zookeeper/zookeeper-3.5.7/bin/<span class="token punctuation">..</span>/conf/zoo.cfg
Client port found: <span class="token number">2181</span>. Client address: localhost.
Error contacting service. It is probably not running.

原因：
  <span class="token number">1</span>. Leader 和 Follower 未选出，或无法连接
  <span class="token number">2</span>. 只启动不到一半数量的集群，或者防火墙未关闭
  
     关闭防火墙：
     CentOS7：
	
     systemctl status firewalld.service
     systemctl stop firewalld.service	<span class="token comment">#关闭</span>
     systemctl disabled firewalld.service	<span class="token comment"># 禁用</span>

     CentOS6：
     <span class="token function">service</span> iptables status
     <span class="token function">service</span> iptables stop
     <span class="token function">chkconfig</span> iptables off
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,2),rn=n("h4",{id:"安装-kafka",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装-kafka","aria-hidden":"true"},"#"),s(" 安装 Kafka")],-1),un={href:"http://kafka.apache.org/downloads.html",target:"_blank",rel:"noopener noreferrer"},kn=t(`<li><p>集群主机：<code>192.168.100.100 、192.168.100.110 、192.168.100.120</code></p></li><li><p>上传并解压到 /opt/kafka/kafka3.x</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># ll</span>
总用量 <span class="token number">68</span>
drwxr-xr-x. <span class="token number">3</span> root root  <span class="token number">4096</span> <span class="token number">3</span>月  <span class="token number">21</span> <span class="token number">12</span>:55 bin
drwxr-xr-x. <span class="token number">3</span> root root  <span class="token number">4096</span> <span class="token number">3</span>月  <span class="token number">21</span> <span class="token number">11</span>:44 config
drwxr-xr-x. <span class="token number">2</span> root root   <span class="token number">187</span> <span class="token number">3</span>月  <span class="token number">22</span> 00:33 datas
drwxr-xr-x. <span class="token number">2</span> root root  <span class="token number">8192</span> <span class="token number">3</span>月  <span class="token number">21</span> 09:59 libs
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">14521</span> <span class="token number">9</span>月   <span class="token number">9</span> <span class="token number">2021</span> LICENSE
drwxr-xr-x. <span class="token number">2</span> root root   <span class="token number">262</span> <span class="token number">9</span>月   <span class="token number">9</span> <span class="token number">2021</span> licenses
drwxr-xr-x. <span class="token number">2</span> root root  <span class="token number">4096</span> <span class="token number">3</span>月  <span class="token number">22</span> 00:00 logs
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">28184</span> <span class="token number">9</span>月   <span class="token number">9</span> <span class="token number">2021</span> NOTICE
drwxr-xr-x. <span class="token number">2</span> root root    <span class="token number">44</span> <span class="token number">9</span>月   <span class="token number">9</span> <span class="token number">2021</span> site-docs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),dn=n("p",null,"修改配置文件：config/server.properties",-1),mn=n("p",null,[s("主要修改："),n("code",null,"broker.id"),s(" 、 "),n("code",null,"log.dirs"),s(" 、"),n("code",null,"zookeeper.connect")],-1),vn={href:"http://broker.id",target:"_blank",rel:"noopener noreferrer"},bn=n("li",null,'log.dirs：kafka 运行日志（数据）存放的路径，路径不需要提前创建，kafka 自动创建，可以配置多个磁盘路径，路径与路径之间可以用 "，" 分隔',-1),hn=n("li",null,"zookeeper.connect：配置连接 Zookeeper 集群地址（在 zk 根目录下创建/kafka，方便管理）",-1),gn=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#broker 的全局唯一编号，不能重复，只能是数字</span>
<span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token comment">#处理网络请求的线程数量</span>
<span class="token assign-left variable">num.network.threads</span><span class="token operator">=</span><span class="token number">3</span>
<span class="token comment">#用来处理磁盘 IO 的线程数量</span>
<span class="token assign-left variable">num.io.threads</span><span class="token operator">=</span><span class="token number">8</span>
<span class="token comment">#发送套接字的缓冲区大小</span>
<span class="token assign-left variable">socket.send.buffer.bytes</span><span class="token operator">=</span><span class="token number">102400</span>
<span class="token comment">#接收套接字的缓冲区大小</span>
<span class="token assign-left variable">socket.receive.buffer.bytes</span><span class="token operator">=</span><span class="token number">102400</span>
<span class="token comment">#请求套接字的缓冲区大小</span>
<span class="token assign-left variable">socket.request.max.bytes</span><span class="token operator">=</span><span class="token number">104857600</span>
<span class="token comment">#kafka 运行日志(数据)存放的路径，路径不需要提前创建，kafka 自动创建，可以</span>
<span class="token comment">#配置多个磁盘路径，路径与路径之间可以用&quot;，&quot;分隔</span>
<span class="token assign-left variable">log.dirs</span><span class="token operator">=</span>/opt/kafka/kafka3.x/datas
<span class="token comment">#topic 在当前 broker 上的分区个数</span>
<span class="token assign-left variable">num.partitions</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token comment">#用来恢复和清理 data 下数据的线程数量</span>
<span class="token assign-left variable">num.recovery.threads.per.data.dir</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># 每个 topic 创建时的副本数，默认时 1 个副本</span>
<span class="token assign-left variable">offsets.topic.replication.factor</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token comment">#segment 文件保留的最长时间，超时将被删除</span>
<span class="token assign-left variable">log.retention.hours</span><span class="token operator">=</span><span class="token number">168</span>
<span class="token comment">#每个 segment 文件的大小，默认最大 1G</span>
<span class="token assign-left variable">log.segment.bytes</span><span class="token operator">=</span><span class="token number">1073741824</span>
<span class="token comment"># 检查过期数据的时间，默认 5 分钟检查一次是否数据过期</span>
<span class="token assign-left variable">log.retention.check.interval.ms</span><span class="token operator">=</span><span class="token number">300000</span>
<span class="token comment">#配置连接 Zookeeper 集群地址（在 zk 根目录下创建/kafka，方便管理）</span>
<span class="token assign-left variable">zookeeper.connect</span><span class="token operator">=</span>hadoop102:2181,hadoop103:2181,hadoop104:2181/kafka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),fn={href:"http://broker.id",target:"_blank",rel:"noopener noreferrer"},yn=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka<span class="token punctuation">]</span><span class="token comment">#  xsync kafka3.x/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),_n=n("code",null,"kafka3.x/config/server.propertis",-1),wn={href:"http://broker.id",target:"_blank",rel:"noopener noreferrer"},xn=t(`<p>192.168.100.110 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">############################# Server Basics #############################</span>

<span class="token comment"># The id of the broker. This must be set to a unique integer for each broker.</span>
<span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>192.168.100.120：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">############################# Server Basics #############################</span>

<span class="token comment"># The id of the broker. This must be set to a unique integer for each broker.</span>
<span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Sn=t(`<li><p>配置 Kafka 环境变量并刷新</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># java</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/opt/java/jdk1.8.0_131
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span>/opt/java/jdk1.8.0_131/jre
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:%JAVA_HOME%/lib:%JAVA_HOME%/lib
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span>

<span class="token comment"># zookeeper</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">ZOOKEEPER_HOME</span><span class="token operator">=</span>/opt/zookeeper/zookeeper-3.5.7
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ZOOKEEPER_HOME</span>/bin:<span class="token environment constant">$PATH</span>

<span class="token comment">#KAFKA_HOME</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_HOME</span><span class="token operator">=</span>/opt/kafka/kafka3.x
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$KAFKA_HOME</span>/bin

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刷新环境变量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment">#  source /etc/profile</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>分发环境变量并刷新</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka<span class="token punctuation">]</span><span class="token comment">#  xsync /etc/profile</span>
<span class="token comment">#  192.168.100.110、192.168.100.120</span>
<span class="token punctuation">[</span>root@localhost kafka<span class="token punctuation">]</span><span class="token comment">#  source /etc/profile</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动集群</p><ul><li><p>第一步：启动 Zookeeper 集群</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment">#  zk.sh start</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>第二步：依次启动 <code>192.168.100.100 、192.168.100.110 、192.168.100.120</code> 的 Kafka</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># /opt/kafka/kafka3.x/bin/kafka-server-start.sh -daemon /opt/kafka/kafka3.x/config/server.properties</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># jpsall.sh</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token number">192.168</span>.100.100<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token number">4577</span> QuorumPeerMain
<span class="token number">4978</span> Kafka
<span class="token number">5093</span> Jps
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token number">192.168</span>.100.110<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token number">11639</span> Kafka
<span class="token number">11738</span> Jps
<span class="token number">11151</span> QuorumPeerMain
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token number">192.168</span>.100.120<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token number">11169</span> QuorumPeerMain
<span class="token number">11735</span> Jps
<span class="token number">11644</span> Kafka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>停止集群，依次停止 <code>192.168.100.100 、192.168.100.110 、192.168.100.120</code> 的 Kafka</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># /opt/kafka/kafka3.x/bin/kafka-server-stop.sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：<strong>停止 Kafka 集群时，需要一定时间，一定要等 Kafka 所有节点进程全部停止后再停止 Zookeeper 集群</strong>。因为 Zookeeper 集群当中记录着 Kafka 集群相关信息，Zookeeper 集群一旦先停止， Kafka 集群就没有办法再获取停止进程的信息，只能手动杀死 Kafka 进程。</p></li>`,4),qn=t(`<p>集群启停脚本 <code>kf.sh</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#! /bin/bash</span>
<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>
<span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token number">192.168</span>.100.100 <span class="token number">192.168</span>.100.110 <span class="token number">192.168</span>.100.120
                <span class="token keyword">do</span>
                        <span class="token builtin class-name">echo</span> <span class="token string">&quot; --------Start <span class="token variable">$i</span> Kafka-------&quot;</span>
                        <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">&quot;/opt/kafka/kafka3.x/bin/kafka-server-start.sh -daemon /opt/kafka/kafka3.x/config/server.properties&quot;</span>
                <span class="token keyword">done</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">&quot;stop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token number">192.168</span>.100.100 <span class="token number">192.168</span>.100.110 <span class="token number">192.168</span>.100.120
                <span class="token keyword">do</span>
                        <span class="token builtin class-name">echo</span> <span class="token string">&quot; --------Stop <span class="token variable">$i</span> Kafka-------&quot;</span>
                        <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">&quot;/opt/kafka/kafka3.x/bin/kafka-server-stop.sh &quot;</span>
                <span class="token keyword">done</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Pn={href:"http://kf.sh",target:"_blank",rel:"noopener noreferrer"},Kn=t(`<p>录，需要修改 shell 脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#! /bin/bash</span>
<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>
<span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token number">192.168</span>.100.100 <span class="token number">192.168</span>.100.110 <span class="token number">192.168</span>.100.120
                <span class="token keyword">do</span>
                        <span class="token builtin class-name">echo</span> <span class="token string">&quot; --------Start <span class="token variable">$i</span> Kafka-------&quot;</span>
                        <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">&quot;source /etc/profile;nohup /opt/kafka/kafka3.x/bin/kafka-server-start.sh -daemon /opt/kafka/kafka3.x/config/server.properties&quot;</span>
                <span class="token keyword">done</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">&quot;stop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token number">192.168</span>.100.100 <span class="token number">192.168</span>.100.110 <span class="token number">192.168</span>.100.120
                <span class="token keyword">do</span>
                        <span class="token builtin class-name">echo</span> <span class="token string">&quot; --------Stop <span class="token variable">$i</span> Kafka-------&quot;</span>
                        <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">&quot;source /etc/profile;nohup /opt/kafka/kafka3.x/bin/kafka-server-stop.sh &quot;</span>
                <span class="token keyword">done</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置权限并拷贝到 /usr/bin 目录下：（或建立软链接）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost shell<span class="token punctuation">]</span><span class="token comment"># chmod +x kf.sh</span>
<span class="token punctuation">[</span>root@localhost shell<span class="token punctuation">]</span><span class="token comment"># cp kf.sh /usr/bin/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),zn=t(`<li><p>注意事项</p><p>启动 Kafka 几秒后进程退出</p><p><strong>解决方案：查看启动日志</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># cat log/server.log</span>
<span class="token punctuation">[</span><span class="token number">2023</span>-01-12 <span class="token number">23</span>:22:11,589<span class="token punctuation">]</span> INFO Cluster ID <span class="token operator">=</span> Zc7nlyfTQ5qPbhY2d8I_3A <span class="token punctuation">(</span>kafka.server.KafkaServer<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">2023</span>-01-12 <span class="token number">23</span>:22:11,598<span class="token punctuation">]</span> ERROR Fatal error during KafkaServer startup. Prepare to <span class="token function">shutdown</span> <span class="token punctuation">(</span>kafka.server.KafkaServer<span class="token punctuation">)</span>
kafka.common.InconsistentClusterIdException: The Cluster ID 1_3tWXR8Q16qq7H2vwhIng doesn&#39;t match s tored clusterId Some<span class="token punctuation">(</span>ivQZIX9gTB-dj05be_i_-w<span class="token punctuation">)</span> <span class="token keyword">in</span> meta.properties. The broker is trying to <span class="token function">join</span> the wrong cluster. Configured zookeeper.connect may be wrong.
    at kafka.server.KafkaServer.startup<span class="token punctuation">(</span>KafkaServer.scala:228<span class="token punctuation">)</span>
    at kafka.Kafka$.main<span class="token punctuation">(</span>Kafka.scala:109<span class="token punctuation">)</span>
    at kafka.Kafka.main<span class="token punctuation">(</span>Kafka.scala<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一步：<strong>确定内存够用，可以修改，Kafka 默认 1G</strong></p><p>第二步：<strong>meta.properties 和 cluster_id 不一致</strong>，要么删除目录 <code>log.dirs=/opt/kafka/kafka3.x/datas</code>后重新启动（推荐），要么手动修改（不推荐）</p></li><li><p>启动报错：查看 logs/server.log 启动日志</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>org.apache.zookeeper.KeeperException<span class="token variable">$NodeExistsException</span><span class="token builtin class-name">:</span> KeeperErrorCode <span class="token operator">=</span> NodeExists
        at org.apache.zookeeper.KeeperException.create<span class="token punctuation">(</span>KeeperException.java:126<span class="token punctuation">)</span>
        at kafka.zk.KafkaZkClient<span class="token variable">$CheckedEphemeral</span>.getAfterNodeExists<span class="token punctuation">(</span>KafkaZkClient.scala:1904<span class="token punctuation">)</span>
        at kafka.zk.KafkaZkClient<span class="token variable">$CheckedEphemeral</span>.create<span class="token punctuation">(</span>KafkaZkClient.scala:1842<span class="token punctuation">)</span>
        at kafka.zk.KafkaZkClient.checkedEphemeralCreate<span class="token punctuation">(</span>KafkaZkClient.scala:1809<span class="token punctuation">)</span>
        at kafka.zk.KafkaZkClient.registerBroker<span class="token punctuation">(</span>KafkaZkClient.scala:96<span class="token punctuation">)</span>
        at kafka.server.KafkaServer.startup<span class="token punctuation">(</span>KafkaServer.scala:319<span class="token punctuation">)</span>
        at kafka.Kafka$.main<span class="token punctuation">(</span>Kafka.scala:109<span class="token punctuation">)</span>
        at kafka.Kafka.main<span class="token punctuation">(</span>Kafka.scala<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因：之前 Kafka 在运行时没有正常关闭，导致一些临时节点没有被删除。要解决这个问题，可以尝试删除旧的临时节点并重新启动 Kafka</p></li>`,2),Cn=t(`<h3 id="命令行操作" tabindex="-1"><a class="header-anchor" href="#命令行操作" aria-hidden="true">#</a> 命令行操作</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># cd bin &amp;&amp; ls</span>
connect-distributed.sh        kafka-dump-log.sh              kafka-storage.sh
connect-mirror-maker.sh       kafka-features.sh              kafka-streams-application-reset.sh
connect-standalone.sh         kafka-get-offsets.sh           kafka-topics.sh
kafka-acls.sh                 kafka-leader-election.sh       kafka-transactions.sh
kafka-broker-api-versions.sh  kafka-log-dirs.sh              kafka-verifiable-consumer.sh
kafka-cluster.sh              kafka-metadata-shell.sh        kafka-verifiable-producer.sh
kafka-configs.sh              kafka-mirror-maker.sh          trogdor.sh
kafka-console-consumer.sh     kafka-producer-perf-test.sh    windows
kafka-console-producer.sh     kafka-reassign-partitions.sh   zookeeper-security-migration.sh
kafka-consumer-groups.sh      kafka-replica-verification.sh  zookeeper-server-start.sh
kafka-consumer-perf-test.sh   kafka-run-class.sh             zookeeper-server-stop.sh
kafka-delegation-tokens.sh    kafka-server-start.sh          zookeeper-shell.sh
kafka-delete-records.sh       kafka-server-stop.sh
<span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),En={href:"http://kafka-console-producer.sh",target:"_blank",rel:"noopener noreferrer"},An={href:"http://kafka-console-consumer.sh",target:"_blank",rel:"noopener noreferrer"},Rn={href:"http://kafka-topics.sh",target:"_blank",rel:"noopener noreferrer"},In=t(`<h4 id="主题相关命令" tabindex="-1"><a class="header-anchor" href="#主题相关命令" aria-hidden="true">#</a> 主题相关命令</h4><p>查看主题操作的相关命令参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#主题命令</span>
<span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># bin/kafka-topics.sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>--bootstrap-server &lt;String: server to connect to&gt;</td><td>连接的 Kafka Broker 主机名称和端口号</td></tr><tr><td>--topic &lt;String: topic&gt;</td><td>topic 的名称</td></tr><tr><td>--create</td><td>创建主题</td></tr><tr><td>--delete</td><td>删除主题</td></tr><tr><td>--alter</td><td>修改主题</td></tr><tr><td>--list</td><td>查看所有主题</td></tr><tr><td>--describe</td><td>查看主题详细描述信息</td></tr><tr><td>--partitions &lt;Integer: # of partitions&gt;</td><td>设置分区数</td></tr><tr><td>--replication-factor</td><td>设置分区副本</td></tr><tr><td>--config &lt;String: name=value&gt;</td><td>更新系统默认的配置</td></tr></tbody></table><p>示例：</p><ul><li><p>查看所有主题</p><p>多个 broker 以逗号隔开</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># bin/kafka-topics.sh --bootstrap-server 192.168.100.100:9092 --list</span>

<span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># bin/kafka-topics.sh --bootstrap-server 192.168.100.100:9092,192.168.100.110:9092 --list</span>

<span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># bin/kafka-topics.sh --bootstrap-server 192.168.100.100:9092,192.168.100.110:9092,192.168.100.120:9092 --list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建主题 first</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># bin/kafka-topics.sh --bootstrap-server 192.168.100.100:9092 --create --partitions 1 --replication-factor 3 --topic first</span>
Created topic first.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看主题详情</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>    <span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># bin/kafka-topics.sh --bootstrap-server 192.168.100.100:9092 --describe --topic first</span>
Topic: first    TopicId: RO0D3TvwR8yI3TX50bRZKQ PartitionCount: <span class="token number">1</span>       ReplicationFactor: <span class="token number">3</span>    Configs: <span class="token assign-left variable">segment.bytes</span><span class="token operator">=</span><span class="token number">1073741824</span>
        Topic: first    Partition: <span class="token number">0</span>    Leader: <span class="token number">2</span>       Replicas: <span class="token number">2,1</span>,0 Isr: <span class="token number">2,1</span>,0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Partition: 0【表示分区在 0 的 broker 上】</p></li><li><p>增加主题分区数量，只能增加不能减少</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># bin/kafka-topics.sh --bootstrap-server 192.168.100.100:9092 --alter --partitions 2 --topic first</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>重新查看</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># bin/kafka-topics.sh --bootstrap-server 192.168.100.100:9092 --describe --topic first  </span>
Topic: first    TopicId: RO0D3TvwR8yI3TX50bRZKQ PartitionCount: <span class="token number">2</span>       ReplicationFactor: <span class="token number">3</span>    Configs: <span class="token assign-left variable">segment.bytes</span><span class="token operator">=</span><span class="token number">1073741824</span>
        Topic: first    Partition: <span class="token number">0</span>    Leader: <span class="token number">2</span>       Replicas: <span class="token number">2,1</span>,0 Isr: <span class="token number">2,1</span>,0
        Topic: first    Partition: <span class="token number">1</span>    Leader: <span class="token number">0</span>       Replicas: <span class="token number">0,1</span>,2 Isr: <span class="token number">0,1</span>,2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时有两个分区。</p></li><li><p>删除主题</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># bin/kafka-topics.sh --bootstrap-server 192.168.100.100:9092 --delete --topic first</span>
<span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="生产者相关命令" tabindex="-1"><a class="header-anchor" href="#生产者相关命令" aria-hidden="true">#</a> 生产者相关命令</h4><p>生产者操作脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># kafka-console-producer.sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相关参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>--bootstrap-server &lt;String: server to connect to&gt;</td><td>连接的 Kafka Broker 主机名称和端口号</td></tr><tr><td>--topic &lt;String: topic&gt;</td><td>操作的 topic 名称</td></tr></tbody></table><h4 id="消费者相关命令" tabindex="-1"><a class="header-anchor" href="#消费者相关命令" aria-hidden="true">#</a> 消费者相关命令</h4><p>消费者操作脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># kafka-console-consumer.sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相关参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>--bootstrap-server &lt;String: server to connect to&gt;</td><td>连接的 Kafka Broker 主机名称和端口号</td></tr><tr><td>--topic &lt;String: topic&gt;</td><td>操作的 topic 名称</td></tr><tr><td>--from-beginning</td><td>从头开始消费</td></tr><tr><td>--group &lt;String: consumer group id&gt;</td><td>指定消费者组名称</td></tr></tbody></table><p><strong>生产消费示例：</strong></p><ul><li><p>生产者发送消息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># kafka-console-producer.sh --bootstrap-server 192.168.100.100:9092 --topic first</span>
<span class="token operator">&gt;</span>demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>消费者消费消息</p><p>默认只消费主题中新生产的数据，如果包含主题所有的历史数据，需要添加参数 <code>--from-begining</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># kafka-console-consumer.sh --bootstrap-server 192.168.100.110:9092 --topic first</span>
<span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>消费主题中所有的历史数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># kafka-console-consumer.sh --bootstrap-server 192.168.100.110:9092 --topic first --from-beginning</span>
demo
<span class="token builtin class-name">test</span>
example
hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="kafka-生产者" tabindex="-1"><a class="header-anchor" href="#kafka-生产者" aria-hidden="true">#</a> kafka 生产者</h2><h3 id="生产者消息发送流程" tabindex="-1"><a class="header-anchor" href="#生产者消息发送流程" aria-hidden="true">#</a> 生产者消息发送流程</h3><h4 id="发送原理" tabindex="-1"><a class="header-anchor" href="#发送原理" aria-hidden="true">#</a> 发送原理</h4><figure><img src="`+o+'" alt="Kafka生产者发送流程.png" tabindex="0" loading="lazy"><figcaption>Kafka生产者发送流程.png</figcaption></figure>',23),Tn=n("li",null,[n("p",null,[s("生产者通过 Main 线程发送消息，创建了 Producer 对象，调用 Send() 方法发送数据，根据业务需求经过拦截器对消息进行处理（一般不做处理），再由自己的序列化器进行序列化（跨节点通信），再通过分区器 Partitioner 规定每个数据发往那个分区，一个分区创建一个队列，即发往一个缓存队列中（在内存中创建），队列大小默认 32M，每一批次大小默认为 16K，发送数据时会创建批次大小，每个批次会从"),n("code",null,"内存池"),s("中取出内存，当批次中的数据发送到 Kafka 集群中时，会将批次释放至内存池中。")])],-1),Ln=n("p",null,"再由 Sender 线程主动拉取数据，拉取数据时需要满足两个条件：",-1),On=n("li",null,[n("strong",null,"batch.size：只有数据积累到 batch.size 之后，sender 才会发送数据。默认 16K")],-1),jn={href:"http://linger.ms",target:"_blank",rel:"noopener noreferrer"},Mn={href:"http://linger.ms",target:"_blank",rel:"noopener noreferrer"},Fn=n("p",null,"发送数据到 broker 时，每个分区的数据，会以节点的形式，每一个 节点会有一个队列，如果发送给 broker 的数据没有应答，则队列最多会缓存 5 个 Request。",-1),Zn=n("li",null,[n("p",null,"Selector 负责建立 Socket 连接并发送数据，broker 对于发送的数据会进行 ACK 应答，其中："),n("ul",null,[n("li",null,"0：表示生产者发送过来的数据不需要等待数据落盘应答"),n("li",null,"1：表示生产者发送过来的数据，Leader 收到并落盘应答"),n("li",null,"-1（all）：表示生产者发送过来的数据，Leader 和 ISR 队列中的所有节点收到数据落盘后应答，-1 和 all 等价")]),n("p",null,"如果应答成功，则会清除掉 Request 中的数据，并清空分区中的数据，如果应答失败，则会进行重试，重试的最大次数为 Integer.MAX_VALUE")],-1),Nn=n("h4",{id:"重要参数列表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#重要参数列表","aria-hidden":"true"},"#"),s(" 重要参数列表")],-1),$n=n("thead",null,[n("tr",null,[n("th",null,"参数名称"),n("th",null,"描述")])],-1),Hn=n("tr",null,[n("td",null,"bootstrap.servers"),n("td",null,"生产者连接集群所需的 broker 地址清单 。 例如 hadoop102:9092,hadoop103:9092,hadoop104:9092，可以设置 1 个或者多个，中间用逗号隔开。注意这里并非需要所有的 broker 地址，因为生产者从给定的 broker 里查找到其他 broker 信息")],-1),Vn=n("tr",null,[n("td",null,"key.serializer 和 value.serializer"),n("td",null,[n("strong",null,"指定发送消息的 key 和 value 的序列化类型（一定要写全类名）")])],-1),Bn=n("tr",null,[n("td",null,"buffer.memory"),n("td",null,[n("strong",null,"RecordAccumulator 缓冲区总大小，默认 32m")])],-1),Jn=n("tr",null,[n("td",null,"batch.size"),n("td",null,[n("strong",null,"缓冲区一批数据最大值，默认 16k。适当增加该值，可以提高吞吐量，但是如果该值设置太大，会导致数据传输延迟增加")])],-1),Gn={href:"http://linger.ms",target:"_blank",rel:"noopener noreferrer"},Dn=n("td",null,[n("strong",null,"如果数据迟迟未达到 batch.size，sender 等待 linger.time 之后就会发送数据。单位 ms，默认值是 0ms，表示没有延迟。生产环境建议该值大小为 5-100ms 之间")],-1),Qn=n("tr",null,[n("td",null,"acks"),n("td",null,[s("0：生产者发送过来的数据，不需要等数据落盘应答。"),n("br"),s("1：生产者发送过来的数据，Leader 收到数据后应答。"),n("br"),s("-1（all）：生产者发送过来的数据，Leader 和 ISR 队列里面的所有节点收齐数据后应答。默认值是-1，-1 和 all 是等价")])],-1),Un=n("tr",null,[n("td",null,"max.in.flight.requests.per.connection"),n("td",null,"允许最多没有返回 ack 的次数，默认为 5，开启幂等性要保证该值是 1-5 的数字。")],-1),Xn=n("tr",null,[n("td",null,"retries"),n("td",null,"当消息发送出现错误的时候，系统会重发消息。retries 表示重试次数。默认是 int 最大值，2147483647。 如果设置了重试，还想保证消息的有序性，需要设置 MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION=1 否则在重试此失败消息的时候，其他的消息可能发送成功了")],-1),Yn={href:"http://retry.backoff.ms",target:"_blank",rel:"noopener noreferrer"},Wn=n("td",null,"两次重试之间的时间间隔，默认是 100ms",-1),ns=n("tr",null,[n("td",null,"enable.idempotence"),n("td",null,"是否开启幂等性，默认 true，开启幂等性")],-1),ss=n("tr",null,[n("td",null,"compression.type"),n("td",null,[n("strong",null,"生产者发送的所有数据的压缩方式。默认是 none，也 就是不压缩。 支持压缩类型：none、gzip、snappy、lz4 和 zstd。")])],-1),as=t(`<h3 id="异步发送-api" tabindex="-1"><a class="header-anchor" href="#异步发送-api" aria-hidden="true">#</a> 异步发送 API</h3><h4 id="普通异步发送" tabindex="-1"><a class="header-anchor" href="#普通异步发送" aria-hidden="true">#</a> 普通异步发送</h4><p>生产者发送时的异步指的是，数据发送到 RecordAccumulator 缓冲区中，无需等待 Sender 线程发送数据等待结果返回。</p><p>示例：创建 Kafka 生产者，采用异步的方式发送到 Kafka Broker</p><ul><li><p>创建工程 Kafka_GettingStart</p></li><li><p>引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>kafka-clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建生产者 CustomProducer</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>kafka</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">KafkaProducer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerRecord</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span></span><span class="token class-name">StringSerializer</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 创建配置对象</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;192.168.100.100:9092,192.168.100.110:9092,192.168.100.120:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2. 创建 KafkaProducer 对象</span>
        <span class="token comment">// try(KafkaProducer&lt;String, String&gt; kafkaProducer = new KafkaProducer&lt;&gt;(properties)){}</span>
        <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3. 调用 Send 方法</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;example: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 4. 关闭资源</span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动消费者进行测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost kafka3.x<span class="token punctuation">]</span><span class="token comment"># kafka-console-consumer.sh --bootstrap-server 192.168.100.110:9092 --topic first</span>
example: <span class="token number">0</span>
example: <span class="token number">1</span>
example: <span class="token number">2</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="异步发送回调" tabindex="-1"><a class="header-anchor" href="#异步发送回调" aria-hidden="true">#</a> 异步发送回调</h4><ul><li><p>添加回调</p><p><strong>注意：消息发送失败会自动重试，不需要在回调函数中手动重试</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>kafka</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span></span><span class="token class-name">StringSerializer</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerCallback</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 创建配置对象</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;192.168.100.100:9092,192.168.100.110:9092,192.168.100.120:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2. 创建 KafkaProducer 对象</span>
        <span class="token comment">// try(KafkaProducer&lt;String, String&gt; kafkaProducer = new KafkaProducer&lt;&gt;(properties)){}</span>
        <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3. 调用 Send 方法</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;example: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span><span class="token class-name">RecordMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Topic: &quot;</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, Partition: &quot;</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                        exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 4. 关闭资源</span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台打印：</p><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>Topic: first, Partition: 0
Topic: first, Partition: 0
Topic: first, Partition: 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="同步发送-api" tabindex="-1"><a class="header-anchor" href="#同步发送-api" aria-hidden="true">#</a> 同步发送 API</h3><p>生产者同步发送指的是，数据发送到 RecordAccumulator 缓冲区中，之后等待 Sender 线程发送数据到 broker ，等待结果返回。</p><ul><li><p>只需在异步发送的基础上，调用 get( )方法即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>kafka</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span></span><span class="token class-name">StringSerializer</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerSync</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 创建配置对象</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;192.168.100.100:9092,192.168.100.110:9092,192.168.100.120:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2. 创建 KafkaProducer 对象</span>
        <span class="token comment">// try(KafkaProducer&lt;String, String&gt; kafkaProducer = new KafkaProducer&lt;&gt;(properties)){}</span>
        <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3. 调用 Send 方法</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 同步发送</span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;example: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 4. 关闭资源</span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>测试</p></li></ul><h3 id="生产者分区" tabindex="-1"><a class="header-anchor" href="#生产者分区" aria-hidden="true">#</a> 生产者分区</h3><h4 id="分区优点" tabindex="-1"><a class="header-anchor" href="#分区优点" aria-hidden="true">#</a> 分区优点</h4><ul><li><p>便于合理使用存储资源，每个 Partition 在一个 Broker 上存储，可以把海量的数据按照分区切割成一 块一块数据存储在多台 Broker 上。</p><p>合理控制分区的任务，可以实现负载均衡的效果</p></li><li><p>提高并行度，生产者可以以分区为单位发送数据；消费者可以以分区为单位进行消费数据</p></li></ul><img src="`+g+`" alt="Kafka分区优点.png" style="zoom:80%;"><h4 id="生产者发送消息的分区策略" tabindex="-1"><a class="header-anchor" href="#生产者发送消息的分区策略" aria-hidden="true">#</a> 生产者发送消息的分区策略</h4><p>分区策略由默认的分区器 DefaultPartitioner 决定。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * The default partitioning strategy:
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>If a partition is specified in the record, use it
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>If no partition is specified but a key is present choose a partition based on a hash of the key
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>If no partition or key is present choose the sticky partition that changes when the batch is full.
 * 
 * See KIP-480 for details about sticky partitioning.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultPartitioner</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token punctuation">{</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认的分区策略有三种情况：</p><ul><li>指明 partition 的情况下，将所有数据写入指定的分区</li><li>没有指明 partition 但是 key 存在，会对 key 的 hash 值与 topic 的 partition 进行取余得到 partition 值</li><li>既没有 partition 值又没有 key 值的情况下，Kafka 采用 Sticky Partition（黏性分区器），会随机选择一个分区，并尽可能一直使用该分区，待该分区的 batch 已满或者已完成，Kafka 再随机一个分区进行使用（和上一次的分区不同，如果此次随机选择的分区和上一个相同，则会重新选择分区）。</li></ul><p>在 ProducerRecord 中指定分区：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> partition<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Headers</span> headers<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> timestamp<span class="token punctuation">;</span>
    
    <span class="token comment">// ......</span>

    <span class="token keyword">public</span> <span class="token class-name">ProducerRecord</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Integer</span> partition<span class="token punctuation">,</span> <span class="token class-name">Long</span> timestamp<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> partition<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token keyword">public</span> <span class="token class-name">ProducerRecord</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Integer</span> partition<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> partition<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">ProducerRecord</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Integer</span> partition<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> partition<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">ProducerRecord</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">ProducerRecord</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ......</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：通过示例时，如果初始只有一个分区，则指定的分区不存在时，程序会阻塞，因此需要确保分区的数量不止一个，方便观察分区策略</strong></p><p>示例一：指明 partition 的情况下，将所有数据写入指定的分区</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;example: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span><span class="token class-name">RecordMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Topic: &quot;</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, Partition: &quot;</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例二：没有指明 partition 但是 key 存在，会对 key 的 hash 值与 topic 的 partition 进行取余得到 partition 值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;example: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span><span class="token class-name">RecordMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Topic: &quot;</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, Partition: &quot;</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义分区器" tabindex="-1"><a class="header-anchor" href="#自定义分区器" aria-hidden="true">#</a> 自定义分区器</h4><p>自定义分区器时，需要实现 Partitioner 接口，重写 partition 方法，使用自定义分区器时，需要在 Properties 中配置参数</p><p>MyPartitioner：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 自定义分区
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPartitioner</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     *
     * <span class="token keyword">@param</span> <span class="token parameter">topic</span> The topic name
     * <span class="token keyword">@param</span> <span class="token parameter">key</span> The key to partition on (or null if no key)
     * <span class="token keyword">@param</span> <span class="token parameter">keyBytes</span> The serialized key to partition on( or null if no key)
     * <span class="token keyword">@param</span> <span class="token parameter">value</span> The value to partition on or null
     * <span class="token keyword">@param</span> <span class="token parameter">valueBytes</span> The serialized value to partition on or null
     * <span class="token keyword">@param</span> <span class="token parameter">cluster</span> The current cluster metadata
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> valueBytes<span class="token punctuation">,</span> <span class="token class-name">Cluster</span> cluster<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> msgValue <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> partition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msgValue<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;example&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            partition <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            partition <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> partition<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Properties 中配置参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">PARTITIONER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;com.example.kafka.MyPartitioner&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="生产者如何提高吞吐量" tabindex="-1"><a class="header-anchor" href="#生产者如何提高吞吐量" aria-hidden="true">#</a> 生产者如何提高吞吐量</h3>`,33),es=n("li",null,[s("batch.size：批次大小，默认 16K "),n("ul",null,[n("li",null,"每次发送到 broker 的消息数据量大小")])],-1),ts={href:"http://linger.ms",target:"_blank",rel:"noopener noreferrer"},ps={href:"http://linger.ms",target:"_blank",rel:"noopener noreferrer"},os=n("li",null,[s("compression.type：压缩 snappy "),n("ul",null,[n("li",null,"对批次数据进行压缩可以提高传输量，默认 none，可配置值 gzip、snappy、 lz4 和 zstd")])],-1),ls=n("li",null,[s("RecordAccumulator：缓冲区大小，修改为 64M "),n("ul",null,[n("li",null,"当生产者异步发送消息时，如果 RecordAccumulator 过小，会造成消息堆积，生产者端会阻塞。")])],-1),cs=t(`<p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>kafka</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">KafkaProducer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">Producer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerRecord</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span></span><span class="token class-name">StringSerializer</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 生产者提高吞吐量参数配置
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerParameter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;192.168.100.100:9092,192.168.100.110:9092,192.168.100.120:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// batch.size 默认 16K</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BATCH_SIZE_CONFIG</span><span class="token punctuation">,</span> <span class="token number">16384</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// linger.ms 默认 0ms</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">LINGER_MS_CONFIG</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// compression.type</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">COMPRESSION_TYPE_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;snappy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// RecordAccumulator 默认 64M</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BUFFER_MEMORY_CONFIG</span><span class="token punctuation">,</span> <span class="token number">33554432</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;example: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据可靠性" tabindex="-1"><a class="header-anchor" href="#数据可靠性" aria-hidden="true">#</a> 数据可靠性</h3><p><strong>ACK 应答级别：</strong></p><ul><li>0：表示生产者发送过来的数据不需要等待数据落盘应答</li><li>1：表示生产者发送过来的数据，Leader 收到并落盘应答</li><li>-1（all）：表示生产者发送过来的数据，Leader 和 ISR 队列中的所有节点收到数据落盘后应答，-1 和 all 等价</li></ul><figure><img src="`+o+'" alt="Kafka生产者发送流程.png" tabindex="0" loading="lazy"><figcaption>Kafka生产者发送流程.png</figcaption></figure><p>ACK 应答级别：</p>',7),is=n("li",null,[n("p",null,"0：表示生产者发送过来的数据不需要等待数据落盘应答"),n("p",null,[n("strong",null,"如果 Leader 收到数据后，尚且没有落盘，此时 Leader 挂掉，那么数据就会丢失。")]),n("img",{src:f,alt:"ACK应答级别.0png",style:{zoom:"67%"}})],-1),rs=n("li",null,[n("p",null,"1：表示生产者发送过来的数据，Leader 收到并落盘应答"),n("p",null,[n("strong",null,"应答完成后，还没有同步副本，此时 Leader 挂掉，从剩余的 Follower 中选出 Leader，新的 Leader 不会收到消息，因为生产者认为已经发送成功了，会导致数据丢失。")]),n("img",{src:y,alt:"ACK 应答级别1.png",style:{zoom:"80%"}})],-1),us=n("p",null,"-1（all）：表示生产者发送过来的数据，Leader 和 ISR 队列中的所有节点收到数据落盘后应答，-1 和 all 等价",-1),ks=n("p",null,"如果 Leader 收到数据，所有 Follower 都开始同步数据， 但有一个 Follower，因为某种故障，迟迟不能与 Leader 进行同步，这样就会导致 Leader 不能应答，进而因为一个 Follower 挂掉导致整个集群瘫痪。",-1),ds={href:"http://replica.lag.time.max.ms",target:"_blank",rel:"noopener noreferrer"},ms=n("img",{src:_,alt:"ACK 应答级别all.png",style:{zoom:"80%"}},null,-1),vs=t(`<p>需要注意的是：如果分区副本设置为 1 个，或者 ISR 里应答的最小副本数量 （ min.insync.replicas 默认为1）设置为1，和 ack = 1 的效果是一样的，仍然有丢数的风险（leader：0，isr:0）</p><p><strong>因此：数据完全可靠条件 = ACK 级别设置为 -1 + 分区副本大于等于 2 + ISR 里应答的最小副本数量大于等于 2</strong></p><p>可靠性总结：</p><ul><li>acks = 0，生产者发送数据过来后，不需要等待数据落盘应答，可靠性差，效率高</li><li>acks = 1，生产者发送过来数据 Leader 应答落盘，可靠性中等，效率中等</li><li>acks = -1，生产者发送过来数据 Leader 和 ISR 队列里面所有 Follwer 应答，可靠性高，效率低</li><li>在生产环境中，acks=0 很少使用；acks=1，一般用于传输普通日志，允许丢个别数据；acks=-1，一般用于传输和钱相关的数据， 对可靠性要求比较高的场景。</li></ul><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>kafka</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">KafkaProducer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerRecord</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span></span><span class="token class-name">StringSerializer</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerACK</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;192.168.100.100:9092,192.168.100.110:9092,192.168.100.120:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ACK 应答级别</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">ACKS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 重试次数 retries，默认 2147483647</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">RETRIES_CONFIG</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;example: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据去重" tabindex="-1"><a class="header-anchor" href="#数据去重" aria-hidden="true">#</a> 数据去重</h3><p>**数据重复：**当应答级别为 all ，并且 Leader 和所有 Follower 都落盘后，Leader 还未应答，便已经挂掉，此时重新选举出 Leader 后，生产者重新发送消息，便会造成数据的重复。</p><img src="`+w+'" alt="ACK应答级别为all时数据重复.png" style="zoom:67%;"><h4 id="数据传递语义" tabindex="-1"><a class="header-anchor" href="#数据传递语义" aria-hidden="true">#</a> 数据传递语义</h4><blockquote><ul><li><p>至少一次（At Least Once）= ACK 级别设置为 -1 + 分区副本大于等于 2 + ISR 里应答的最小副本数量大于等于2 【数据不丢】</p></li><li><p>最多一次（At Most Once）= ACK 级别设置为 0 【数据不重】</p></li><li><p>总结： At Least Once 可以保证数据不丢失，但是不能保证数据不重复； At Most Once 可以保证数据不重复，但是不能保证数据不丢失。</p></li><li><p>精确一次（Exactly Once）：对于一些非常重要的信息，比如和钱相关的数据，要求数据既不能重复也不丢失。</p></li><li><p>Kafka 0.11 版本以后，引入了一项重大特性：<strong>幂等性和事务</strong></p></li></ul></blockquote><h4 id="幂等性" tabindex="-1"><a class="header-anchor" href="#幂等性" aria-hidden="true">#</a> 幂等性</h4><p><strong>幂等性原理：</strong></p><p>幂等性就是指 Producer 不论向 Broker 发送多少次重复数据，Broker 端都只会持久化一条，保证了不重复</p><p>精确一次（Exactly Once） = 幂等性 + 至少一次（ ack=-1 + 分区副本数 &gt;= 2 + ISR 最小副本数量 &gt;= 2）</p><p>重复数据的判断标准：具有相同主键（key）的消息提交时，Broker 只会持久化一条。其中：</p><ul><li>PID 是 Kafka 每次重启都会分配一个新的</li><li>Partition 表示分区号</li><li>Sequence Number是单调自增的</li></ul><p><strong>所以幂等性只能保证的是在单分区单会话内不重复，如果要保证不重复，需要事务支持。</strong></p><p>如以下两个消息分别发送两个不同的分区。</p><figure><img src="'+x+'" alt="幂等性原理.png" tabindex="0" loading="lazy"><figcaption>幂等性原理.png</figcaption></figure><p>**使用幂等性：**开启参数 enable.idempotence 默认为 true，false 关闭</p><h4 id="生产者事务" tabindex="-1"><a class="header-anchor" href="#生产者事务" aria-hidden="true">#</a> 生产者事务</h4><p><strong>Kafka 事务原理：</strong></p><p><strong>注意：开启事务，必须开启幂等性</strong></p><figure><img src="'+S+`" alt="生产者事务原理.png" tabindex="0" loading="lazy"><figcaption>生产者事务原理.png</figcaption></figure><h4 id="相关-api" tabindex="-1"><a class="header-anchor" href="#相关-api" aria-hidden="true">#</a> 相关 API</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Producer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 1 初始化事务</span>
    <span class="token keyword">void</span> <span class="token function">initTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 2 开启事务</span>
    <span class="token keyword">void</span> <span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ProducerFencedException</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 3 在事务内提交已经消费的偏移量（主要用于消费者）</span>
    <span class="token keyword">void</span> <span class="token function">sendOffsetsToTransaction</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">OffsetAndMetadata</span><span class="token punctuation">&gt;</span></span> offsets<span class="token punctuation">,</span> <span class="token class-name">String</span> consumerGroupId<span class="token punctuation">)</span> <span class="token keyword">throws</span>   <span class="token class-name">ProducerFencedException</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 4 提交事务</span>
    <span class="token keyword">void</span> <span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ProducerFencedException</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 5 放弃事务（类似于回滚事务的操作）</span>
    <span class="token keyword">void</span> <span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ProducerFencedException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：通过事务保证消息不重复也不丢失</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>kafka</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">KafkaProducer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerRecord</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span></span><span class="token class-name">StringSerializer</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerTransaction</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;192.168.100.100:9092,192.168.100.110:9092,192.168.100.120:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 设置事务ID</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">TRANSACTIONAL_ID_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;transaction_id_0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 初始化事务</span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">initTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 开启事务</span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;example: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 模拟 Kafka 异常</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 提交事务</span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 回滚事务</span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据乱序" tabindex="-1"><a class="header-anchor" href="#数据乱序" aria-hidden="true">#</a> 数据乱序</h3><blockquote><ul><li><p>kafka 在 1.x 版本之前保证数据单分区有序，条件如下：</p><p>max.in.flight.requests.per.connection = 1（不需要考虑是否开启幂等性）。</p></li><li><p>kafka 在 1.x 及以后版本保证数据单分区有序，条件如下：</p><ul><li>未开启幂等性： max.in.flight.requests.per.connection 需要设置为 1</li><li>开启幂等性： max.in.flight.requests.per.connection 需要设置小于等于 5 <ul><li>说明：因为在 kafka1.x 以后，启用幂等后，kafka 服务端会缓存 producer 发来的最近 5 个 request 的元数据， 故无论如何，都可以保证最近 5 个request 的数据都是有序的</li></ul></li></ul></li></ul></blockquote><p>数据乱序：</p><p>如下示例，Request1 和 Request2 发送成功会数据会落盘，Request3 因故障没有发送成功，后面的 Request4 和 Request5 却不会落盘，当 Request3 发送并落盘后，Request4 和 Request5 才会落盘，以此保证数据的有序性。</p><figure><img src="`+q+'" alt="单分区数据有序.png" tabindex="0" loading="lazy"><figcaption>单分区数据有序.png</figcaption></figure><h3 id="数据有序" tabindex="-1"><a class="header-anchor" href="#数据有序" aria-hidden="true">#</a> 数据有序</h3><p>对于单分区内保证数据有序，但多分区，分区与分区之间是无序的，如果要保证多分区内数据有序，则可以在消费端进行数据的重排序。</p><img src="'+P+`" alt="数据有序.png" style="zoom:67%;"><h2 id="kafka-broker" tabindex="-1"><a class="header-anchor" href="#kafka-broker" aria-hidden="true">#</a> Kafka Broker</h2><h3 id="kafka-broker-工作流程" tabindex="-1"><a class="header-anchor" href="#kafka-broker-工作流程" aria-hidden="true">#</a> Kafka Broker 工作流程</h3><h4 id="zookeeper-存储的-kafka-信息" tabindex="-1"><a class="header-anchor" href="#zookeeper-存储的-kafka-信息" aria-hidden="true">#</a> Zookeeper 存储的 Kafka 信息</h4><p>在 Zookeeper 中查看 kafka 的信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="kafka-broker-整体工作流程" tabindex="-1"><a class="header-anchor" href="#kafka-broker-整体工作流程" aria-hidden="true">#</a> Kafka Broker 整体工作流程</h4><h4 id="broker-重要参数" tabindex="-1"><a class="header-anchor" href="#broker-重要参数" aria-hidden="true">#</a> Broker 重要参数</h4><h3 id="节点服役与退役" tabindex="-1"><a class="header-anchor" href="#节点服役与退役" aria-hidden="true">#</a> 节点服役与退役</h3><h4 id="服役新节点" tabindex="-1"><a class="header-anchor" href="#服役新节点" aria-hidden="true">#</a> 服役新节点</h4><h4 id="退役旧节点" tabindex="-1"><a class="header-anchor" href="#退役旧节点" aria-hidden="true">#</a> 退役旧节点</h4><h3 id="kafka-副本" tabindex="-1"><a class="header-anchor" href="#kafka-副本" aria-hidden="true">#</a> Kafka 副本</h3><h4 id="副本基本信息" tabindex="-1"><a class="header-anchor" href="#副本基本信息" aria-hidden="true">#</a> 副本基本信息</h4><h4 id="leader-选举流程" tabindex="-1"><a class="header-anchor" href="#leader-选举流程" aria-hidden="true">#</a> Leader 选举流程</h4><h4 id="leader-和-follower-故障处理细节" tabindex="-1"><a class="header-anchor" href="#leader-和-follower-故障处理细节" aria-hidden="true">#</a> Leader 和 Follower 故障处理细节</h4><h4 id="分区副本分配" tabindex="-1"><a class="header-anchor" href="#分区副本分配" aria-hidden="true">#</a> 分区副本分配</h4><h4 id="手动调整分区副本存储" tabindex="-1"><a class="header-anchor" href="#手动调整分区副本存储" aria-hidden="true">#</a> 手动调整分区副本存储</h4><h4 id="leader-partition-负载平衡" tabindex="-1"><a class="header-anchor" href="#leader-partition-负载平衡" aria-hidden="true">#</a> Leader Partition 负载平衡</h4><h4 id="增加副本因子" tabindex="-1"><a class="header-anchor" href="#增加副本因子" aria-hidden="true">#</a> 增加副本因子</h4><h3 id="文件存储" tabindex="-1"><a class="header-anchor" href="#文件存储" aria-hidden="true">#</a> 文件存储</h3><h4 id="文件存储机制" tabindex="-1"><a class="header-anchor" href="#文件存储机制" aria-hidden="true">#</a> 文件存储机制</h4><h4 id="文件清除策略" tabindex="-1"><a class="header-anchor" href="#文件清除策略" aria-hidden="true">#</a> 文件清除策略</h4><h3 id="高效读写数据" tabindex="-1"><a class="header-anchor" href="#高效读写数据" aria-hidden="true">#</a> 高效读写数据</h3><h2 id="kafka-消费者" tabindex="-1"><a class="header-anchor" href="#kafka-消费者" aria-hidden="true">#</a> Kafka 消费者</h2><h2 id="kafka-eagle-监控" tabindex="-1"><a class="header-anchor" href="#kafka-eagle-监控" aria-hidden="true">#</a> Kafka-Eagle 监控</h2><p>Kafka-Eagle 框架可以监控 Kafka 集群的整体运行情况，在生产环境中经常使用</p><h3 id="mysql-环境准备" tabindex="-1"><a class="header-anchor" href="#mysql-环境准备" aria-hidden="true">#</a> MySQL 环境准备</h3><p>Kafka-Eagle 的安装依赖于 MySQL，MySQL 主要用来存储可视化展示的数据。</p><ul><li><p>下载并解压相应安装包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># pwd</span>
/opt/mysql5.7
<span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># ll</span>
总用量 <span class="token number">185388</span>
-rw-r--r--. <span class="token number">1</span> root root    <span class="token number">277604</span> <span class="token number">6</span>月   <span class="token number">9</span> <span class="token number">13</span>:32 mysql-community-common-5.7.16-1.el7.x86_64.rpm
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">2237116</span> <span class="token number">6</span>月   <span class="token number">9</span> <span class="token number">13</span>:32 mysql-community-libs-5.7.16-1.el7.x86_64.rpm
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">2112700</span> <span class="token number">6</span>月   <span class="token number">9</span> <span class="token number">13</span>:32 mysql-community-libs-compat-5.7.16-1.el7.x86_64.rpm
-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">25034716</span> <span class="token number">6</span>月   <span class="token number">9</span> <span class="token number">13</span>:32 mysql-community-client-5.7.16-1.el7.x86_64.rpm
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">159295840</span> <span class="token number">6</span>月   <span class="token number">9</span> <span class="token number">13</span>:32 mysql-community-server-5.7.16-1.el7.x86_64.rpm
-rw-r--r--. <span class="token number">1</span> root root    <span class="token number">872303</span> <span class="token number">6</span>月   <span class="token number">9</span> <span class="token number">13</span>:32 mysql-connector-java-5.1.27-bin.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>卸载自带的 mysql-lib</p><ul><li><p>如果是虚拟机：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># rpm -qa | grep -i -E mysql\\|mariadb | xargs -n1 sudo rpm -e --nodeps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果是阿里云服务器（安装的是 Linux 最小版）</p><p>卸载 MySQL 依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># yum remove mysql-libs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载编译相关依赖并安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># yum install libaio</span>
<span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># yum install autoconf</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>安装依赖</p><ul><li><p>安装 MySQL 依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-common-5.7.16-1.el7.x86_64.rpm</span>
<span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-libs-5.7.16-1.el7.x86_64.rpm</span>
<span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-libs-compat-5.7.16-1.el7.x86_64.rpm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装 MySQL-Client</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-client-5.7.16-1.el7.x86_64.rpm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>安装 MySQL-Server</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-server-5.7.16-1.el7.x86_64.rpm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>启动 MySQL</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># systemctl start mysqld</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看 MySQL 密码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># cat /var/log/mysqld.log | grep password</span>
<span class="token number">2023</span>-06-09T05:53:49.161800Z <span class="token number">1</span> <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> A temporary password is generated <span class="token keyword">for</span> root@localhost: tQlEHZzjF5_c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置密码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用上一步查询到的密码（带单引号）登录 MySQL</span>
<span class="token punctuation">[</span>root@localhost mysql5.7<span class="token punctuation">]</span><span class="token comment"># mysql -uroot -p&#39;tQlEHZzjF5_c&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>更改密码策略</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password_length</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password_policy</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新设置密码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> <span class="token assign-left variable">password</span><span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>设置 MySQL 远程连接</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> user,host from user<span class="token punctuation">;</span>
+-----------+-----------+
<span class="token operator">|</span> user      <span class="token operator">|</span> <span class="token function">host</span>      <span class="token operator">|</span>
+-----------+-----------+
<span class="token operator">|</span> mysql.sys <span class="token operator">|</span> localhost <span class="token operator">|</span>
<span class="token operator">|</span> root      <span class="token operator">|</span> localhost <span class="token operator">|</span>
+-----------+-----------+
<span class="token number">2</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
mysql<span class="token operator">&gt;</span> update user <span class="token builtin class-name">set</span> <span class="token function">host</span> <span class="token operator">=</span> <span class="token string">&#39;%&#39;</span> where user <span class="token operator">=</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>
Query OK, <span class="token number">1</span> row affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
Rows matched: <span class="token number">1</span>  Changed: <span class="token number">1</span>  Warnings: <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>刷新权限并退出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> flush privileges<span class="token punctuation">;</span>
Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
mysql<span class="token operator">&gt;</span> quit
Bye
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="kafka-kraft-模式" tabindex="-1"><a class="header-anchor" href="#kafka-kraft-模式" aria-hidden="true">#</a> Kafka-Kraft 模式</h2><h1 id="kafka-集成" tabindex="-1"><a class="header-anchor" href="#kafka-集成" aria-hidden="true">#</a> Kafka 集成</h1><h2 id="集成-flume" tabindex="-1"><a class="header-anchor" href="#集成-flume" aria-hidden="true">#</a> 集成 Flume</h2><h2 id="集成-flink" tabindex="-1"><a class="header-anchor" href="#集成-flink" aria-hidden="true">#</a> 集成 Flink</h2><h2 id="集成-springboot" tabindex="-1"><a class="header-anchor" href="#集成-springboot" aria-hidden="true">#</a> 集成 SpringBoot</h2><h2 id="集成-spark" tabindex="-1"><a class="header-anchor" href="#集成-spark" aria-hidden="true">#</a> 集成 Spark</h2><h1 id="源码解析" tabindex="-1"><a class="header-anchor" href="#源码解析" aria-hidden="true">#</a> 源码解析</h1><h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备" aria-hidden="true">#</a> 环境准备</h2><h2 id="生产者源码" tabindex="-1"><a class="header-anchor" href="#生产者源码" aria-hidden="true">#</a> 生产者源码</h2><h2 id="消费者源码" tabindex="-1"><a class="header-anchor" href="#消费者源码" aria-hidden="true">#</a> 消费者源码</h2><h2 id="服务器源码" tabindex="-1"><a class="header-anchor" href="#服务器源码" aria-hidden="true">#</a> 服务器源码</h2><h1 id="生产调优" tabindex="-1"><a class="header-anchor" href="#生产调优" aria-hidden="true">#</a> 生产调优</h1><h2 id="kafka-硬件配置选择" tabindex="-1"><a class="header-anchor" href="#kafka-硬件配置选择" aria-hidden="true">#</a> Kafka 硬件配置选择</h2><h2 id="kafka-生产者-1" tabindex="-1"><a class="header-anchor" href="#kafka-生产者-1" aria-hidden="true">#</a> Kafka 生产者</h2><h2 id="kafka-broker-1" tabindex="-1"><a class="header-anchor" href="#kafka-broker-1" aria-hidden="true">#</a> kafka Broker</h2><h2 id="kafka-消费者-1" tabindex="-1"><a class="header-anchor" href="#kafka-消费者-1" aria-hidden="true">#</a> Kafka 消费者</h2><h2 id="kafka-总体" tabindex="-1"><a class="header-anchor" href="#kafka-总体" aria-hidden="true">#</a> kafka 总体</h2>`,82);function bs(hs,gs){const l=p("font"),e=p("ExternalLinkIcon");return i(),r("div",null,[n("div",z,[a(l,{size:"70"},{default:u(()=>[C]),_:1})]),n("blockquote",null,[E,A,n("p",null,[s("官网地址："),n("a",R,[s("https://kafka.apache.org/"),a(e)])]),I,n("p",null,[n("a",T,[s("https://www.bilibili.com/video/BV1vr4y1677k/?spm_id_from=333.337.search-card.all.click"),a(e)])])]),L,n("p",null,[s("Kafka 下载地址："),n("a",O,[s("https://kafka.apache.org/downloads"),a(e)])]),j,n("h4",M,[F,s(" 分发脚本 "),n("a",Z,[s("xsync.sh"),a(e)])]),n("blockquote",null,[n("ul",null,[n("li",null,[s("创建脚本 "),n("a",N,[s("xsync.sh"),a(e)]),s("，传入要传输的目录名")]),n("li",null,[s("shell 脚本要求具有执行权限：chmod +x "),n("a",$,[s("xsync.sh"),a(e)])]),H])]),V,n("h4",B,[J,s(" 查看 Java 进程 "),n("a",G,[s("jspall.sh"),a(e)])]),D,n("p",null,[s("Zookeeper 地址："),n("a",Q,[s("https://zookeeper.apache.org/releases.html"),a(e)])]),U,n("p",null,[s("​ 启动 Zookeeper："),n("a",X,[s("zkServer.sh"),a(e)]),s(" start")]),Y,n("p",null,[s("​ 查看状态："),n("a",W,[s("zkServer.sh"),a(e)]),s(" status")]),n("p",null,[s("​ 启动客户端："),n("a",nn,[s("zkCli.sh"),a(e)])]),sn,n("p",null,[s("​ 停止 Zookeeper："),n("a",an,[s("zkServer.sh"),a(e)]),s(" stop")]),en,n("p",null,[s("参数说明："),n("a",tn,[s("https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance"),a(e)])]),pn,n("ol",null,[on,n("li",null,[n("p",null,[s("通过 "),n("a",ln,[s("xsync.sh"),a(e)]),s(" 分发配置文件，并修改文件 myid 中的编号")])]),cn]),rn,n("p",null,[s("官方下载地址："),n("a",un,[s("http://kafka.apache.org/downloads.html"),a(e)])]),n("ul",null,[kn,n("li",null,[dn,mn,n("ul",null,[n("li",null,[n("a",vn,[s("broker.id"),a(e)]),s("：broker 的全局唯一编号，不能重复，只能是数字")]),bn,hn]),gn]),n("li",null,[n("p",null,[s("分发 Kafka 目录并修改 "),n("a",fn,[s("broker.id"),a(e)])]),yn,n("p",null,[s("修改 192.168.100.110 、192.168.100.120 的 "),_n,s(" 中的 "),n("a",wn,[s("broker.id"),a(e)])]),xn]),Sn,n("li",null,[qn,n("p",null,[s("**注意：**这里有个问题，单机执行 Kafka 启动命令可以运行，但是使用 "),n("a",Pn,[s("kf.sh"),a(e)]),s(' 脚本执行不会启动 Kafka，且会报错：nohup: 无法运行命令"java": 没有那个文件或目')]),Kn]),zn]),Cn,n("ul",null,[n("li",null,[s("生产者："),n("a",En,[s("kafka-console-producer.sh"),a(e)])]),n("li",null,[s("消费者："),n("a",An,[s("kafka-console-consumer.sh"),a(e)])]),n("li",null,[s("主题（集群）："),n("a",Rn,[s("kafka-topics.sh"),a(e)])])]),In,n("blockquote",null,[n("ol",null,[Tn,n("li",null,[Ln,n("ul",null,[On,n("li",null,[n("strong",null,[n("a",jn,[s("linger.ms"),a(e)]),s("：如果数据迟迟未达到 batch.size，sender 等待 "),n("a",Mn,[s("linger.ms"),a(e)]),s(" 设置的时间到了之后就会发送数据。单位ms，默认值是 0ms，表示没有延迟。")])])]),Fn]),Zn])]),Nn,n("table",null,[$n,n("tbody",null,[Hn,Vn,Bn,Jn,n("tr",null,[n("td",null,[n("a",Gn,[s("linger.ms"),a(e)])]),Dn]),Qn,Un,Xn,n("tr",null,[n("td",null,[n("a",Yn,[s("retry.backoff.ms"),a(e)])]),Wn]),ns,ss])]),as,n("blockquote",null,[n("ol",null,[es,n("li",null,[n("a",ts,[s("linger.ms"),a(e)]),s("：等待时间，修改为 5 - 100ms "),n("ul",null,[n("li",null,[s("默认 0s，只要有消息就会被发送到 broker，但是会影响效率，当 "),n("a",ps,[s("linger.ms"),a(e)]),s(" 设置较大时，消息有延迟。")])])]),os,ls])]),cs,n("ul",null,[is,rs,n("li",null,[us,ks,n("p",null,[n("strong",null,[s("因此 Leader 维护了一个动态的 in-sync replica set（ISR），意为和 Leader 保持同步的 Follower + Leader 集合（leader：0，isr:0,1,2）。如果 Follower 长时间未向Leader 发送通信请求或同步数据，则该 Follower 将被踢出 ISR。该时间阈值由 "),n("a",ds,[s("replica.lag.time.max.ms"),a(e)]),s(" 参数设定，默认 30s。这样就不用等待长期联系不上或者已经故障的节点。")])]),ms])]),vs])}const _s=c(K,[["render",bs],["__file","Kafka.html.vue"]]);export{_s as default};
