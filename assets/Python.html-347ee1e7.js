import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c,d as n,b as a,w as u,e as s,f as t}from"./app-ae2ce5af.js";const r={},d={align:"center"},k=n("b",null,"Python",-1),m=t('<h1 id="python-简介" tabindex="-1"><a class="header-anchor" href="#python-简介" aria-hidden="true">#</a> Python 简介</h1><p>Python 是一种解释型、面向对象、动态数据类型的高级程序设计语言。</p><p>Python 由 Guido van Rossum 于 1989 年底发明，第一个公开发行版发行于 1991 年。</p><p>像 Perl 语言一样, Python 源代码同样遵循 GPL(GNU General Public License) 协议。</p><p><strong>官方宣布，2020 年 1 月 1 日， 停止 Python 2 的更新。</strong></p><p><strong>Python 2.7 被确定为最后一个 Python 2.x 版本。</strong></p><p>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</p><p>Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。</p><ul><li><strong>Python 是一种解释型语言：</strong> 这意味着开发过程中没有了编译这个环节。类似于 PHP 和 Perl 语言。</li><li><strong>Python 是交互式语言：</strong> 这意味着，您可以在一个 Python 提示符 <strong>&gt;&gt;&gt;</strong> 后直接执行代码。</li><li><strong>Python 是面向对象语言:</strong> 这意味着 Python 支持面向对象的风格或代码封装在对象的编程技术。</li><li>**Python 是初学者的语言：**Python 对初学者而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。</li></ul><h2 id="python-发展历史" tabindex="-1"><a class="header-anchor" href="#python-发展历史" aria-hidden="true">#</a> Python 发展历史</h2><p>Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。</p><p>Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。</p><p>像 Perl 语言一样，Python 源代码同样遵循 GPL(GNU General Public License)协议。</p><p>现在 Python 是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展。</p><p>Python 2.7 被确定为最后一个 Python 2.x 版本，它除了支持 Python 2.x 语法外，还支持部分 Python 3.1 语法。</p><h2 id="python-安装" tabindex="-1"><a class="header-anchor" href="#python-安装" aria-hidden="true">#</a> Python 安装</h2>',16),v={href:"https://www.python.org/downloads/",target:"_blank",rel:"noopener noreferrer"},h=n("h3",{id:"windows",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#windows","aria-hidden":"true"},"#"),s(" Windows")],-1),b=n("p",null,"双击运行，选择安装位置。",-1),y=n("h3",{id:"centos-安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#centos-安装","aria-hidden":"true"},"#"),s(" CentOS 安装")],-1),g=n("p",null,"CentOS、Ubuntu 默认安装 Python2.7",-1),f=n("p",null,"源码编译安装 Python3.10",-1),w={href:"https://www.python.org/downloads/",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>依赖程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token function">wget</span> zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel ti-devel gcc <span class="token function">make</span> zlib zlib-devellibffi-devel <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装步骤：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://www.python.org/ftp/python/3.10.11/Python-3.10.11.tgz

<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> Python-3.10.11.tgz

<span class="token builtin class-name">cd</span> Python-3.10.11

./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/python-3.10.11

<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>

<span class="token builtin class-name">cd</span> /usr/local/python-3.10.11

<span class="token comment"># Linux 默认安装了 Python2.x，/usr/bin/python</span>
/usr/bin/python

<span class="token comment"># 建立软链接，链接到 python 编译安装的目录</span>
ll /usr/bin <span class="token operator">|</span><span class="token function">grep</span> python

<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/bin/python

<span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/python-3.10.11/bin/python3.10 /usr/bin/python

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项：</p><p>yum 默认使用 python2 作为依赖，安装 python3 后，需要对 yum 进行修改，确保 yum 不会受到影响。</p><p>修改以下两个文件的首行解释器版本，将 #! /usr/bin/python 改为 #! /usr/bin/python2：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /usr/libexec/urlgrabber-ext-down
<span class="token function">vim</span> /usr/bin/yum
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="python-解释器" tabindex="-1"><a class="header-anchor" href="#python-解释器" aria-hidden="true">#</a> python 解释器</h2><p>解释执行 python 代码：</p>`,10),x={href:"http://demo.py",target:"_blank",rel:"noopener noreferrer"},P=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Python!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 python 执行：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python <span class="token operator">/</span>opt<span class="token operator">/</span>python3<span class="token operator">/</span>demo<span class="token punctuation">.</span>py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="python-ide-pycharm" tabindex="-1"><a class="header-anchor" href="#python-ide-pycharm" aria-hidden="true">#</a> Python IDE：Pycharm</h2>`,4),_={href:"https://www.jetbrains.com/pycharm/",target:"_blank",rel:"noopener noreferrer"},H=t(`<p>常见设置：</p><ol><li><p>鼠标缩放字体</p><p>同样搜索 increase Font Size 设置增加字体：Ctrl + Wheel + Up</p></li><li><p>安装 translation 插件，鼠标选中后点击右键进行翻译</p></li><li><p>设置文件编码</p></li></ol><h1 id="python-基础" tabindex="-1"><a class="header-anchor" href="#python-基础" aria-hidden="true">#</a> Python 基础</h1><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h2><h3 id="print-函数" tabindex="-1"><a class="header-anchor" href="#print-函数" aria-hidden="true">#</a> print 函数</h3><ul><li>输出字符串（单引号和双引号都可以）</li><li>输出数字（整数和浮点数）</li><li>输出内容到文件中</li></ul><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># print</span>
<span class="token comment"># def print(self, *args, sep=&#39; &#39;, end=&#39;\\n&#39;, file=None)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">12.3</span><span class="token punctuation">)</span>

fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;D:/text.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;a+&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">,</span><span class="token builtin">file</span><span class="token operator">=</span>fp<span class="token punctuation">)</span>
fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><ul><li>单行注释：# ，建议在 # 后添加空格</li><li>多行注释（三个引号（单引号、双引号）之间的内容）：&quot;&quot;&quot; &quot;&quot;&quot;</li><li>中文编码注释：在文件开头使用 # coding:utf-8 指定文件的编码格式</li></ul><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 单行注释</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello python&#39;</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;
    多行注释
&quot;&quot;&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
    [&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;async&#39;, 
    &#39;await&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, 
    &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, 
    &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, 
    &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]
&quot;&quot;&quot;</span>
<span class="token keyword">import</span> keyword
<span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缩进" tabindex="-1"><a class="header-anchor" href="#缩进" aria-hidden="true">#</a> 缩进</h3><p>一般使用 4 个空格作为缩进</p><h3 id="换行" tabindex="-1"><a class="header-anchor" href="#换行" aria-hidden="true">#</a> 换行</h3><p>单行语句换行：使用 \\</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&quot;My First &quot;</span> \\
      <span class="token string">&quot;Python Program!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="引号" tabindex="-1"><a class="header-anchor" href="#引号" aria-hidden="true">#</a> 引号</h3><p>单引号和双引号都可以定义字符串，三个引号代表注释</p><h3 id="输入与输出" tabindex="-1"><a class="header-anchor" href="#输入与输出" aria-hidden="true">#</a> 输入与输出</h3><ul><li>input()</li><li>print()</li></ul><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 输入与输出</span>
mood <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Please Input Your Mood: &quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mood<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符" aria-hidden="true">#</a> 转义字符</h3><p>当字符串中含有特殊字符时，需要对特殊字符进行转义。</p><ul><li>\\n 换行</li><li>\\&quot; 转义引号</li><li>\\t 制表位</li><li>\\r 覆盖，后面的字符会覆盖前面的字符</li><li>\\b 删除，删除前面一个字符</li><li>\\\\ 两个 \\ 表示一个 \\</li><li>raw 字符：在字符串前面添加 r 或者 R 后，字符串中的转义字符不生效，但是字符串最后的引号不能被转义。</li></ul><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 转义字符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Don&#39;t Be Afraid Of \\&quot;Success\\&quot;!&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># Don&#39;t Be Afraid Of &quot;Success&quot;!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello\\nPython&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello\\&#39;Python&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># Hello&#39;Python</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Helo\\tPython&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># Helo	Python</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello\\rPython&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># Python</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello\\bPython&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># HellPython</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello\\\\Python&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># Hello\\Python</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r&quot;Hello\\rPython&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># Hello\\rPython</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r&quot;Hello\\rPython\\\\&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># Hello\\rPython\\\\</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量与数据类型" tabindex="-1"><a class="header-anchor" href="#变量与数据类型" aria-hidden="true">#</a> 变量与数据类型</h2><h3 id="变量命名规则" tabindex="-1"><a class="header-anchor" href="#变量命名规则" aria-hidden="true">#</a> 变量命名规则</h3><ul><li><p>变量名只能是数字、字母、下划线，且不能以数字开头</p></li><li><p>不能是关键字，且区分大小写</p></li></ul><p><strong>变量定义和声明</strong></p><p>变量由三部分组成：</p><ul><li>标识：表示对象所存储的内存地址，使用内置函数 id(obj) 来获取</li><li>类型：表示的是对象的数据类型，使用内置函数 type(obj) 来获取</li><li>值：表示对象所存储的具体数据，使用 print(obi) 可以将值进行打印输出</li></ul><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>serial <span class="token operator">=</span> <span class="token string">&quot;Python&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;标识&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 标识 140719689336912</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;类型&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 类型 &lt;class &#39;str&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;值&#39;</span><span class="token punctuation">,</span> serial<span class="token punctuation">)</span>               <span class="token comment"># 值 Python</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>变量声明</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span>
c <span class="token operator">=</span> <span class="token number">3</span>
a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><p>Python3 中有 6 个标准的数据类型: Number（数字）、String（字符串）、List（列表）、Tuple（元组）、Set（集合）、Dictionary（字典）。其中：</p><ul><li>不可变数据：Number、String、Tuple</li><li>可变数据：List、Dictionary、Set</li></ul><p>常用的数据类型：整数类型、浮点类型、布尔类型（True、False）、字符串类型</p><p>整数的表示方式：</p><ul><li>十进制：默认</li><li>二进制：以 0b 开头</li><li>八进制：以 0o 开头</li><li>十六进制：以 0x 开头</li></ul><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 整数类型</span>
num <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 12 &lt;class &#39;int&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;二进制&quot;</span><span class="token punctuation">,</span> <span class="token number">0b1010</span><span class="token punctuation">)</span>  <span class="token comment"># 二进制 10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;八进制&#39;</span><span class="token punctuation">,</span> <span class="token number">0o11</span><span class="token punctuation">)</span>  <span class="token comment"># 八进制 9</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;十六进制&#39;</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">)</span>  <span class="token comment"># 十六进制 17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浮点数：</p><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 浮点类型</span>
price <span class="token operator">=</span> <span class="token number">13.14</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 13.14 &lt;class &#39;float&#39;&gt;</span>
<span class="token comment"># 浮点数计算不精确，采用二进制存储</span>
num1 <span class="token operator">=</span> <span class="token number">1.1</span>
num2 <span class="token operator">=</span> <span class="token number">2.2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span>  <span class="token comment"># 3.3000000000000003</span>

<span class="token comment"># 解决方案：导入 decimal 模块，使用 Decimal(&#39;1.1&#39;)</span>
<span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal

<span class="token keyword">print</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">&#39;1.1&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> Decimal<span class="token punctuation">(</span><span class="token string">&#39;2.2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3.3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>布尔类型：</p><ul><li>默认使用 True 和 False</li><li>可以转换为 1 和 0</li></ul><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 布尔类型</span>
flag <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True &lt;class &#39;bool&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">False</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字符串</span>
str1 <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>
str2 <span class="token operator">=</span> <span class="token string">&quot;Python&quot;</span>
str3 <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;Hello
    Python
    &#39;&#39;&#39;</span>
str4 <span class="token operator">=</span> <span class="token string">&quot;Tensor&quot;</span> \\
       <span class="token string">&quot;flow&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span>
<span class="token comment"># Hello Python</span>
<span class="token comment"># Hello</span>
<span class="token comment">#     Python</span>
<span class="token comment"># Tensorflow</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换" aria-hidden="true">#</a> 数据类型转换</h3><p>通过类型转换函数 str()、int()、float() 完成整数、浮点数、字符串之间的转换。</p><p>注意：print() 函数中的加号 + 不做自动类型转换。</p><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># + 号不能自动转换为字符串，需要使用 str() 函数将其他数据转为字符串</span>
name <span class="token operator">=</span> <span class="token string">&#39;tom&#39;</span>
age <span class="token operator">=</span> <span class="token number">12</span>
<span class="token comment"># print(name + age)    # TypeError: can only concatenate str (not &quot;int&quot;) to str</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&#39;, &#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># tom, 12</span>

<span class="token comment"># int() 函数将其它数据类型转为整数类型 int</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 12 &lt;class &#39;int&#39;&gt;</span>
<span class="token comment"># print(int(&#39;12.12&#39;))  # ValueError: invalid literal for int() with base 10: &#39;12.12&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span>
<span class="token comment"># print(int(&#39;abc&#39;))    # ValueError: invalid literal for int() with base 10: &#39;abc&#39;</span>

<span class="token comment"># float() 将其他数据类型转为 float</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;12.12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;12.12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 12.12 &lt;class &#39;float&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 12.0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1.0</span>
<span class="token comment"># print(float(&quot;abc&quot;))         # ValueError: could not convert string to float: &#39;abc&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>input() 函数使用示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># input() 函数</span>
a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Please Input Number:&quot;</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment"># &lt;class &#39;str&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h3><p><code>+ - * /(除，保留小数) //(整除) % **(次方)</code></p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h3><ul><li>支持链式赋值：a = b = c = 10</li><li>支持参数赋值：+=、-=、*=、/=、/=、//=、%=</li><li>支持解包赋值：a, b, c = 1, 2, 3</li></ul><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 赋值运算符</span>
<span class="token comment"># 1. 链式赋值</span>
a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 10 140719705089096 10 140719705089096 10 140719705089096</span>
<span class="token comment"># 2. 参数赋值</span>
a <span class="token operator">=</span> <span class="token number">12</span>
a <span class="token operator">//=</span> <span class="token number">5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token comment"># 3. 解包赋值</span>
a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token comment"># x, y, z = 1, 2  # ValueError: not enough values to unpack (expected 3, got 2)</span>
<span class="token comment"># x, y = 1, 2, 3  # ValueError: to many values to unpack (expected 2, got 3)</span>
<span class="token comment"># print(x, y)</span>

<span class="token comment"># 交换两个值</span>
a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h3><ul><li></li></ul><h3 id="布尔运算符" tabindex="-1"><a class="header-anchor" href="#布尔运算符" aria-hidden="true">#</a> 布尔运算符</h3><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h3>`,77);function T(N,S){const o=p("font"),e=p("ExternalLinkIcon");return l(),c("div",null,[n("div",d,[a(o,{size:"70"},{default:u(()=>[k]),_:1})]),m,n("p",null,[s("下载地址："),n("a",v,[s("https://www.python.org/downloads/"),a(e)])]),h,b,y,g,f,n("p",null,[s("地址："),n("a",w,[s("https://www.python.org/downloads/"),a(e)])]),q,n("p",null,[s("新建 py 文件："),n("a",x,[s("demo.py"),a(e)])]),P,n("p",null,[s("下载地址："),n("a",_,[s("https://www.jetbrains.com/pycharm/"),a(e)])]),H])}const z=i(r,[["render",T],["__file","Python.html.vue"]]);export{z as default};
